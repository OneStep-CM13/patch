From 200eb7cbc761fd5ed60a55acf5c192343b956402 Mon Sep 17 00:00:00 2001
From: zhangji <zhangji@smartisan.com>
Date: Fri, 13 Mar 2015 15:17:47 +0800
Subject: [PATCH 2/6] OneStep: Base Impl

rootcause:support smartisanos one step feature.

Signed-off-by: zhangji <zhangji@smartisan.com>
Signed-off-by: totopamimi <totopamimi@gmail.com>
---
 Android.mk                                         |    4 +
 core/java/android/app/SystemServiceRegistry.java   |    9 +
 core/java/android/content/ClipboardManager.java    |   68 +-
 core/java/android/content/Context.java             |   10 +
 core/java/android/content/CopyHistoryItem.aidl     |    3 +
 core/java/android/content/CopyHistoryItem.java     |   70 ++
 core/java/android/content/IClipboard.aidl          |    8 +-
 core/java/android/content/IClipboardListener.aidl  |    7 +
 core/java/android/provider/Settings.java           |    5 +
 core/java/android/view/IWindow.aidl                |    2 +
 core/java/android/view/IWindowSession.aidl         |    5 +-
 core/java/android/view/View.java                   |   33 +-
 core/java/android/view/ViewRootImpl.java           |  178 +++-
 core/java/android/view/WindowManager.java          |   27 +
 core/java/android/view/WindowManagerGlobal.java    |   11 +
 core/java/android/view/WindowManagerImpl.java      |    9 +
 core/java/android/view/WindowManagerPolicy.java    |   32 +-
 core/java/android/view/onestep/IOneStep.aidl       |   27 +
 .../java/android/view/onestep/IOneStepManager.aidl |   67 ++
 .../view/onestep/IOneStepStateObserver.aidl        |   24 +
 core/java/android/view/onestep/OneStepManager.java |   59 ++
 .../android/view/onestep/OneStepManagerImpl.java   |  219 +++++
 core/java/android/widget/Toast.java                |   32 +
 .../com/android/internal/view/BaseIWindow.java     |    3 +
 core/jni/android_view_InputEventSender.cpp         |    4 +-
 core/res/AndroidManifest.xml                       |    7 +
 core/res/res/anim/dock_fade_enter.xml              |    6 +
 core/res/res/anim/dock_fade_exit.xml               |    6 +
 core/res/res/anim/thumb_wallpaper_close.xml        |    7 +
 core/res/res/anim/thumb_wallpaper_enter.xml        |    7 +
 core/res/res/drawable-xxhdpi/shadow_thumb_mode.png |  Bin 0 -> 964 bytes
 .../res/res/drawable-xxhdpi/sidebar_background.png |  Bin 0 -> 80595 bytes
 core/res/res/values/smartisanos_dimens.xml         |    7 +
 core/res/res/values/smartisanos_strings.xml        |    8 +
 core/res/res/values/smartisanos_symbols.xml        |   18 +
 core/res/res/values/styles.xml                     |    5 +
 packages/SettingsProvider/res/values/defaults.xml  |    4 +
 .../android/providers/settings/DatabaseHelper.java |    1 +
 .../providers/settings/SettingsProvider.java       |   14 +-
 .../android/server/clipboard/ClipboardService.java |   94 +-
 .../clipboard/CopyHistoryDatabaseHelper.java       |  172 ++++
 .../android/server/input/InputWindowHandle.java    |    2 +
 .../server/onestep/OneStepManagerService.java      |  292 ++++++
 .../android/server/policy/PhoneWindowManager.java  |  212 +++-
 .../policy/SystemGesturesPointerEventListener.java |   21 +-
 .../SystemGesturesPointerEventListenerThumb.java   |  264 +++++
 .../java/com/android/server/wm/AppTransition.java  |    4 +
 .../core/java/com/android/server/wm/DragState.java |  351 ++++++-
 .../com/android/server/wm/InputConsumerImpl.java   |    1 +
 .../java/com/android/server/wm/InputMonitor.java   |    9 +-
 .../core/java/com/android/server/wm/Session.java   |   23 +-
 .../core/java/com/android/server/wm/TaskStack.java |    3 +-
 .../com/android/server/wm/ThumbModeHelper.java     | 1028 ++++++++++++++++++++
 .../android/server/wm/WindowManagerService.java    |  214 +++-
 .../java/com/android/server/wm/WindowState.java    |  198 +++-
 .../com/android/server/wm/WindowStateAnimator.java |  168 +++-
 .../com_android_server_input_InputWindowHandle.cpp |    6 +
 services/java/com/android/server/SystemServer.java |   21 +
 58 files changed, 3959 insertions(+), 130 deletions(-)
 create mode 100644 core/java/android/content/CopyHistoryItem.aidl
 create mode 100644 core/java/android/content/CopyHistoryItem.java
 create mode 100644 core/java/android/content/IClipboardListener.aidl
 create mode 100644 core/java/android/view/onestep/IOneStep.aidl
 create mode 100644 core/java/android/view/onestep/IOneStepManager.aidl
 create mode 100644 core/java/android/view/onestep/IOneStepStateObserver.aidl
 create mode 100644 core/java/android/view/onestep/OneStepManager.java
 create mode 100644 core/java/android/view/onestep/OneStepManagerImpl.java
 create mode 100644 core/res/res/anim/dock_fade_enter.xml
 create mode 100644 core/res/res/anim/dock_fade_exit.xml
 create mode 100644 core/res/res/anim/thumb_wallpaper_close.xml
 create mode 100644 core/res/res/anim/thumb_wallpaper_enter.xml
 create mode 100644 core/res/res/drawable-xxhdpi/shadow_thumb_mode.png
 create mode 100644 core/res/res/drawable-xxhdpi/sidebar_background.png
 create mode 100644 core/res/res/values/smartisanos_dimens.xml
 create mode 100644 core/res/res/values/smartisanos_strings.xml
 create mode 100644 core/res/res/values/smartisanos_symbols.xml
 create mode 100644 services/core/java/com/android/server/clipboard/CopyHistoryDatabaseHelper.java
 create mode 100644 services/core/java/com/android/server/onestep/OneStepManagerService.java
 create mode 100644 services/core/java/com/android/server/policy/SystemGesturesPointerEventListenerThumb.java
 create mode 100644 services/core/java/com/android/server/wm/ThumbModeHelper.java

diff --git a/Android.mk b/Android.mk
index 03651fa..c03409e 100644
--- a/Android.mk
+++ b/Android.mk
@@ -124,6 +124,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/bluetooth/IBluetoothGattServerCallback.aidl \
 	core/java/android/bluetooth/IBluetoothDun.aidl \
 	core/java/android/content/IClipboard.aidl \
+	core/java/android/content/IClipboardListener.aidl \ \
 	core/java/android/content/IContentService.aidl \
 	core/java/android/content/IIntentReceiver.aidl \
 	core/java/android/content/IIntentSender.aidl \
@@ -260,6 +261,9 @@ LOCAL_SRC_FILES += \
 	core/java/android/view/accessibility/IAccessibilityInteractionConnectionCallback.aidl\
 	core/java/android/view/accessibility/IAccessibilityManager.aidl \
 	core/java/android/view/accessibility/IAccessibilityManagerClient.aidl \
+	core/java/android/view/onestep/IOneStep.aidl \
+	core/java/android/view/onestep/IOneStepStateObserver.aidl \
+	core/java/android/view/onestep/IOneStepManager.aidl \
 	core/java/android/view/IApplicationToken.aidl \
 	core/java/android/view/IAssetAtlas.aidl \
 	core/java/android/view/IGraphicsStats.aidl \
diff --git a/core/java/android/app/SystemServiceRegistry.java b/core/java/android/app/SystemServiceRegistry.java
index 34c967f..129c070 100644
--- a/core/java/android/app/SystemServiceRegistry.java
+++ b/core/java/android/app/SystemServiceRegistry.java
@@ -115,6 +115,8 @@ import android.view.WindowManagerImpl;
 import android.view.accessibility.AccessibilityManager;
 import android.view.accessibility.CaptioningManager;
 import android.view.inputmethod.InputMethodManager;
+import android.view.onestep.OneStepManager;
+import android.view.onestep.OneStepManagerImpl;
 import android.view.textservice.TextServicesManager;
 
 import java.util.HashMap;
@@ -706,6 +708,13 @@ final class SystemServiceRegistry {
             public RadioManager createService(ContextImpl ctx) {
                 return new RadioManager(ctx);
             }});
+
+        registerService(Context.ONE_STEP_SERVICE, OneStepManager.class,
+                new CachedServiceFetcher<OneStepManager>() {
+            @Override
+            public OneStepManager createService(ContextImpl ctx) {
+                return new OneStepManagerImpl(ctx);
+            }});
     }
 
     /**
diff --git a/core/java/android/content/ClipboardManager.java b/core/java/android/content/ClipboardManager.java
index 5653cad..32c3d54 100644
--- a/core/java/android/content/ClipboardManager.java
+++ b/core/java/android/content/ClipboardManager.java
@@ -17,6 +17,7 @@
 package android.content;
 
 import android.content.Context;
+import android.content.IClipboardListener;
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.Handler;
@@ -24,6 +25,7 @@ import android.os.IBinder;
 import android.os.ServiceManager;
 
 import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Interface to the clipboard service, for placing and retrieving text in
@@ -116,13 +118,7 @@ public class ClipboardManager extends android.text.ClipboardManager {
      * @param clip The clipped data item to set.
      */
     public void setPrimaryClip(ClipData clip) {
-        try {
-            if (clip != null) {
-                clip.prepareToLeaveProcess();
-            }
-            getService().setPrimaryClip(clip, mContext.getOpPackageName());
-        } catch (RemoteException e) {
-        }
+        setPrimaryClip(clip, true);
     }
 
     /**
@@ -232,4 +228,62 @@ public class ClipboardManager extends android.text.ClipboardManager {
             ((OnPrimaryClipChangedListener)listeners[i]).onPrimaryClipChanged();
         }
     }
+
+    /**
+     * @hide
+     * @return
+     */
+    public List<CopyHistoryItem> getCopyHistory(){
+        try {
+            return getService().getCopyHistory();
+        } catch (RemoteException e) {
+            return null;
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public void clearCopyHistory(){
+        try {
+            getService().clearCopyHistory();
+        } catch (RemoteException e) {
+            // NA
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public void delete(CopyHistoryItem item) {
+        try {
+            getService().delete(item);
+        } catch (RemoteException e) {
+            // NA
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public void registerListener(IClipboardListener listener){
+        try {
+            getService().registerListener(listener);
+        } catch (RemoteException e) {
+            // NA
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public void setPrimaryClip(ClipData clip, boolean inHistory) {
+        try {
+            if (clip != null) {
+                clip.prepareToLeaveProcess();
+            }
+            getService().setPrimaryClip(clip, inHistory, mContext.getOpPackageName());
+        } catch (RemoteException e) {
+        }
+    }
 }
diff --git a/core/java/android/content/Context.java b/core/java/android/content/Context.java
index 7ddda11..1c9056a 100644
--- a/core/java/android/content/Context.java
+++ b/core/java/android/content/Context.java
@@ -3378,6 +3378,16 @@ public abstract class Context {
     public static final String RADIO_SERVICE = "radio";
 
     /**
+     * Use with {@link #getSystemService} to retrieve a
+     * {@link android.view.onestep.OneStepManager} for accessing the  onestep service.
+     *
+     * @see #getSystemService
+     * @author smartisan
+     * @hide
+     */
+    public static final String ONE_STEP_SERVICE = "onestep";
+    
+    /**
      * Determine whether the given permission is allowed for a particular
      * process and user ID running in the system.
      *
diff --git a/core/java/android/content/CopyHistoryItem.aidl b/core/java/android/content/CopyHistoryItem.aidl
new file mode 100644
index 0000000..97f00df
--- /dev/null
+++ b/core/java/android/content/CopyHistoryItem.aidl
@@ -0,0 +1,3 @@
+package android.content;
+
+parcelable CopyHistoryItem;
diff --git a/core/java/android/content/CopyHistoryItem.java b/core/java/android/content/CopyHistoryItem.java
new file mode 100644
index 0000000..860f452
--- /dev/null
+++ b/core/java/android/content/CopyHistoryItem.java
@@ -0,0 +1,70 @@
+package android.content;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+/**
+ * @hide
+ */
+public class CopyHistoryItem implements Parcelable, Comparable<CopyHistoryItem> {
+    public final String mContent;
+    public final long mTimeStamp;
+
+    public CopyHistoryItem(String content, long timestamp) {
+        mContent = content;
+        mTimeStamp = timestamp;
+    }
+
+    public CopyHistoryItem(Parcel source) {
+        mContent = source.readString();
+        mTimeStamp = source.readLong();
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(mContent);
+        dest.writeLong(mTimeStamp);
+    }
+
+    public static final Parcelable.Creator<CopyHistoryItem> CREATOR = new Parcelable.Creator<CopyHistoryItem>() {
+
+        public CopyHistoryItem createFromParcel(Parcel source) {
+            return new CopyHistoryItem(source);
+        }
+
+        public CopyHistoryItem[] newArray(int size) {
+            return new CopyHistoryItem[size];
+        }
+    };
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || !(o instanceof CopyHistoryItem)) {
+            return false;
+        }
+        return compareTo((CopyHistoryItem) o) == 0;
+    }
+
+    @Override
+    public int compareTo(CopyHistoryItem another) {
+        if (mTimeStamp != another.mTimeStamp) {
+            if (mTimeStamp > another.mTimeStamp) {
+                return -1;
+            } else {
+                return 1;
+            }
+        } else {
+            int res = mContent.compareTo(another.mContent);
+            if (res != 0) {
+                return res;
+            } else {
+                return 0;
+            }
+        }
+    }
+}
diff --git a/core/java/android/content/IClipboard.aidl b/core/java/android/content/IClipboard.aidl
index af0b8f0..be9d3ad 100644
--- a/core/java/android/content/IClipboard.aidl
+++ b/core/java/android/content/IClipboard.aidl
@@ -18,6 +18,8 @@ package android.content;
 
 import android.content.ClipData;
 import android.content.ClipDescription;
+import android.content.CopyHistoryItem;
+import android.content.IClipboardListener;
 import android.content.IOnPrimaryClipChangedListener;
 
 /**
@@ -26,7 +28,7 @@ import android.content.IOnPrimaryClipChangedListener;
  * {@hide}
  */
 interface IClipboard {
-    void setPrimaryClip(in ClipData clip, String callingPackage);
+    void setPrimaryClip(in ClipData clip, boolean inHistory, String callingPackage);
     ClipData getPrimaryClip(String pkg);
     ClipDescription getPrimaryClipDescription(String callingPackage);
     boolean hasPrimaryClip(String callingPackage);
@@ -38,4 +40,8 @@ interface IClipboard {
      * Returns true if the clipboard contains text; false otherwise.
      */
     boolean hasClipboardText(String callingPackage);
+    List<CopyHistoryItem> getCopyHistory();
+    void clearCopyHistory();
+    void delete(in CopyHistoryItem item);
+    void registerListener(IClipboardListener listener);
 }
diff --git a/core/java/android/content/IClipboardListener.aidl b/core/java/android/content/IClipboardListener.aidl
new file mode 100644
index 0000000..6fa62aa
--- /dev/null
+++ b/core/java/android/content/IClipboardListener.aidl
@@ -0,0 +1,7 @@
+package android.content;
+
+/** @hide */
+oneway interface IClipboardListener {
+    void onCopyHistoryChanged();
+}
+
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 3ab16fe..f9936a8 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -8596,6 +8596,11 @@ public final class Settings {
         public static final String CONTACT_METADATA_SYNC = "contact_metadata_sync";
 
         /**
+         * @hide
+         */
+        public static final String SIDE_BAR_MODE = "side_bar_mode";
+
+        /**
          * Whether to enable cellular on boot.
          * The value 1 - enable, 0 - disable
          * @hide
diff --git a/core/java/android/view/IWindow.aidl b/core/java/android/view/IWindow.aidl
index acad496..d93aee9 100644
--- a/core/java/android/view/IWindow.aidl
+++ b/core/java/android/view/IWindow.aidl
@@ -93,6 +93,8 @@ oneway interface IWindow {
      */
     void onAnimationStopped();
 
+    void dispatchThumbModeStates(int states);
+
     /**
      * Called for non-application windows when the enter animation has completed.
      */
diff --git a/core/java/android/view/IWindowSession.aidl b/core/java/android/view/IWindowSession.aidl
index 3956237..f4dc951 100644
--- a/core/java/android/view/IWindowSession.aidl
+++ b/core/java/android/view/IWindowSession.aidl
@@ -145,7 +145,8 @@ interface IWindowSession {
      * null indicates failure.
      */
     IBinder prepareDrag(IWindow window, int flags,
-            int thumbnailWidth, int thumbnailHeight, out Surface outSurface);
+            int thumbnailWidth, int thumbnailHeight, out Surface outSurface,
+            float delX, float delY, int showAnimDelay);
 
     /**
      * Initiate the drag operation itself
@@ -221,4 +222,6 @@ interface IWindowSession {
      * The assumption is that this method will be called rather infrequently.
      */
     void pokeDrawLock(IBinder window);
+
+    void getThumbModeCrop(out Rect outCrop);
 }
diff --git a/core/java/android/view/View.java b/core/java/android/view/View.java
index 4b56352..135b086 100644
--- a/core/java/android/view/View.java
+++ b/core/java/android/view/View.java
@@ -12185,8 +12185,10 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
      * Determines whether the given point, in local coordinates is inside the view.
      */
     /*package*/ final boolean pointInView(float localX, float localY) {
-        return localX >= 0 && localX < (mRight - mLeft)
-                && localY >= 0 && localY < (mBottom - mTop);
+        final int lX = (int)localX;
+        final int lY = (int)localY;
+        return lX >= 0 && lX <= (mRight - mLeft)
+                && lY >= 0 && lY <= (mBottom - mTop);
     }
 
     /**
@@ -19593,6 +19595,22 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
      */
     public final boolean startDrag(ClipData data, DragShadowBuilder shadowBuilder,
             Object myLocalState, int flags) {
+        return startDrag(data, shadowBuilder, myLocalState, flags, 0, 0);
+    }
+
+    /**
+     * @hide
+     */
+    public final boolean startDrag(ClipData data, DragShadowBuilder shadowBuilder,
+            Object myLocalState, int flags, float delX, float delY) {
+        return startDrag(data, shadowBuilder, myLocalState, flags, delX, delY, 0);
+    }
+
+    /**
+     * @hide
+     */
+    public final boolean startDrag(ClipData data, DragShadowBuilder shadowBuilder,
+            Object myLocalState, int flags, float delX, float delY, int showAnimDelay) {
         if (ViewDebug.DEBUG_DRAG) {
             Log.d(VIEW_LOG_TAG, "startDrag: data=" + data + " flags=" + flags);
         }
@@ -19614,7 +19632,7 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
         Surface surface = new Surface();
         try {
             IBinder token = mAttachInfo.mSession.prepareDrag(mAttachInfo.mWindow,
-                    flags, shadowSize.x, shadowSize.y, surface);
+                    flags, shadowSize.x, shadowSize.y, surface, delX, delY, showAnimDelay);
             if (ViewDebug.DEBUG_DRAG) Log.d(VIEW_LOG_TAG, "prepareDrag returned token=" + token
                     + " surface=" + surface);
             if (token != null) {
@@ -19706,7 +19724,14 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
     }
 
     boolean canAcceptDrag() {
-        return (mPrivateFlags2 & PFLAG2_DRAG_CAN_ACCEPT) != 0;
+        return mAlwaysCanAcceptDrag || (mPrivateFlags2 & PFLAG2_DRAG_CAN_ACCEPT) != 0;
+    }
+
+    private boolean mAlwaysCanAcceptDrag = false;
+
+    /** @hide */
+    public void setAlwaysCanAcceptDrag(boolean can){
+        mAlwaysCanAcceptDrag = can;
     }
 
     /**
diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index 9569422..abc9c40 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -22,6 +22,7 @@ import android.app.ActivityManagerNative;
 import android.content.ClipDescription;
 import android.content.ComponentCallbacks;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.res.CompatibilityInfo;
 import android.content.res.Configuration;
@@ -52,6 +53,8 @@ import android.os.RemoteException;
 import android.os.SystemClock;
 import android.os.SystemProperties;
 import android.os.Trace;
+import android.os.UserHandle;
+import android.provider.Settings;
 import android.util.AndroidRuntimeException;
 import android.util.DisplayMetrics;
 import android.util.Log;
@@ -342,9 +345,59 @@ public final class ViewRootImpl implements ViewParent,
 
     private int mViewLayoutDirectionInitial;
 
+    private float mThumbOffsetVeri;
+    private static float SCALE_SIDEBAR = 0.8832f;
+    private static int SCREEN_HEIGHT = 0;
+    private static int SCREEN_WIDTH = 0;
+    public static int THUMB_OFFSET_S_MODE_VERI = 0;
+    public static int THUMB_OFFSET_S_MODE_HORI = 0;
+
     /** Set to true once doDie() has been called. */
     private boolean mRemoved;
 
+    //thumb mode state values
+    int mThumbModeStates = 0;
+    public static final int BIT_THUMB_MODE_ENABLE_SIDEBAR = 1<<0;
+    public static final int BIT_WINDOW_IN_THUMB_MODE_SIDEBAR = 1<<2;
+    public static final int BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR = 1<<5;
+    public static final int BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR = 1<<6;
+    public static final int TRANSACTION_THUMB_STATES = 1000;
+
+    public final class WinScaleState{
+        public static final int NORMAL = 0;
+        public static final int LEFT = 1;
+        public static final int RIGHT = 2;
+    }
+
+    /**
+     * @hide
+     */
+    public final int getWindowScaleState() {
+        if((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+            return WinScaleState.LEFT;
+        }
+        if((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0){
+            return WinScaleState.RIGHT;
+        }
+        return WinScaleState.NORMAL;
+    }
+
+    /**
+     * @hide
+     */
+    public final float getWindowScale() {
+        float scale = 1.0f;
+        if((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+            scale = SCALE_SIDEBAR;
+        }
+        return scale;
+    }
+
+    ///////////////////////////////////////
+    // for power save
+    private int mNeedPowerSave = 0;
+    ////////////////////////////////////
+
     /**
      * Consistency verifier for debugging purposes.
      */
@@ -359,6 +412,9 @@ public final class ViewRootImpl implements ViewParent,
         int localChanges;
     }
 
+    private static final int DELAY_RESET_THUMB_STATE_TOUCH_TIMEOUT = 1000;
+    private static final int DELAY_RESET_THUMB_STATE_IDLE_TIMEOUT = 5000;
+
     public ViewRootImpl(Context context, Display display) {
         mContext = context;
         mWindowSession = WindowManagerGlobal.getWindowSession();
@@ -394,6 +450,11 @@ public final class ViewRootImpl implements ViewParent,
                 mHighContrastTextManager);
         mViewConfiguration = ViewConfiguration.get(context);
         mDensity = context.getResources().getDisplayMetrics().densityDpi;
+        SCREEN_HEIGHT = context.getResources().getDisplayMetrics().heightPixels;
+        SCREEN_WIDTH = context.getResources().getDisplayMetrics().widthPixels;
+        SCALE_SIDEBAR = getSidebarScale(SCREEN_WIDTH);
+        THUMB_OFFSET_S_MODE_VERI = SCREEN_HEIGHT - (int)(SCREEN_HEIGHT * SCALE_SIDEBAR + 0.5f);
+        THUMB_OFFSET_S_MODE_HORI = SCREEN_WIDTH - (int)(SCREEN_WIDTH * SCALE_SIDEBAR + 0.5f);
         mNoncompatDensity = context.getResources().getDisplayMetrics().noncompatDensityDpi;
         mFallbackEventHandler = new PhoneFallbackEventHandler(context);
         mChoreographer = Choreographer.getInstance();
@@ -401,6 +462,66 @@ public final class ViewRootImpl implements ViewParent,
         loadSystemProperties();
     }
 
+    private void updateThumbOffset(){
+        if((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+            mThumbOffsetVeri = THUMB_OFFSET_S_MODE_VERI;
+        }
+    }
+
+    public int getThumbModeState(){
+        return mThumbModeStates;
+    }
+
+    public float getThumbOffset(){
+        return mThumbOffsetVeri;
+    }
+
+    public void getScreenSizeOffset(int[] offset) {
+        switch (getWindowScaleState()) {
+            case WinScaleState.RIGHT:
+                if ((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                    offset[0] = THUMB_OFFSET_S_MODE_HORI;
+                    offset[1] = THUMB_OFFSET_S_MODE_VERI;
+                }
+                break;
+            case WinScaleState.LEFT:
+                offset[0] = 0;
+                offset[1] = (int) mThumbOffsetVeri;
+                break;
+            default:
+                offset[0] = offset[1] = 0;
+                break;
+        }
+    }
+
+    private boolean mWindowScaleChanged = false;
+
+    void updateThumbModeState(int states) {
+        int lastState = mThumbModeStates;
+        mThumbModeStates = states;
+        if((mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0){
+            mHandler.removeCallbacks(mResetThumbModeRunnable);
+        }else{
+            updateThumbOffset();
+        }
+
+        if(((lastState & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0
+                && (mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0)
+                || ((lastState & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0
+                && (mThumbModeStates & BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0)){
+            mWindowScaleChanged = true;
+        }else{
+            mWindowScaleChanged = false;
+        }
+    }
+
+    // scale only used to determine position offset
+    public float getSidebarScale(float w){
+        int sidebarWidthPx = mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.sidebar_width);
+        return  1 - (sidebarWidthPx/w);
+    }
+
     public static void addFirstDrawHandler(Runnable callback) {
         synchronized (sFirstDrawHandlers) {
             if (!sFirstDrawComplete) {
@@ -649,6 +770,7 @@ public final class ViewRootImpl implements ViewParent,
                 mFirstInputStage = nativePreImeStage;
                 mFirstPostImeInputStage = earlyPostImeStage;
                 mPendingInputEventQueueLengthCounterName = "aq:pending:" + counterSuffix;
+
             }
         }
     }
@@ -1080,6 +1202,17 @@ public final class ViewRootImpl implements ViewParent,
         }
     }
 
+    private Runnable mResetThumbModeRunnable = new Runnable(){
+        @Override
+        public void run() {
+            try {
+                mView.getContext().sendBroadcastAsUser(
+                        new Intent("android.view.ViewRootImpl.returnNormalModeFromThumb"), UserHandle.OWNER);
+            } catch (Exception e) {
+            }
+        }
+    };
+
     void scheduleTraversals() {
         if (!mTraversalScheduled) {
             mTraversalScheduled = true;
@@ -1987,7 +2120,11 @@ public final class ViewRootImpl implements ViewParent,
             mAttachInfo.mHasNonEmptyGivenInternalInsets = !insets.isEmpty();
 
             // Tell the window manager.
-            if (insetsPending || !mLastGivenInsets.equals(insets)) {
+            if (insetsPending || !mLastGivenInsets.equals(insets) || mWindowScaleChanged) {
+                if(mWindowScaleChanged){
+                    Log.w("Sidebar", "Window scale changed, do set touch Insets again to wms");
+                }
+                mWindowScaleChanged = false;
                 mLastGivenInsets.set(insets);
 
                 // Translate insets to screen coordinates if needed.
@@ -3203,6 +3340,7 @@ public final class ViewRootImpl implements ViewParent,
     private final static int MSG_DISPATCH_WINDOW_SHOWN = 25;
     private final static int MSG_DISPATCH_WINDOW_ANIMATION_STOPPED = 26;
     private final static int MSG_DISPATCH_WINDOW_ANIMATION_STARTED = 27;
+    private final static int MSG_DISPATCH_THUMB_MODE_STATES = 28;
 
     final class ViewRootHandler extends Handler {
         @Override
@@ -3256,6 +3394,8 @@ public final class ViewRootImpl implements ViewParent,
                     return "MSG_SYNTHESIZE_INPUT_EVENT";
                 case MSG_DISPATCH_WINDOW_SHOWN:
                     return "MSG_DISPATCH_WINDOW_SHOWN";
+                case MSG_DISPATCH_THUMB_MODE_STATES:
+                    return "MSG_DISPATCH_THUMB_MODE_STATES";
             }
             return super.getMessageName(message);
         }
@@ -3411,6 +3551,10 @@ public final class ViewRootImpl implements ViewParent,
                                     AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
                         }
                     }
+
+                    if(!hasWindowFocus && mHandler.hasCallbacks(mResetThumbModeRunnable)){
+                        mHandler.removeCallbacks(mResetThumbModeRunnable);
+                    }
                 }
             } break;
             case MSG_DIE:
@@ -3492,6 +3636,11 @@ public final class ViewRootImpl implements ViewParent,
             case MSG_DISPATCH_WINDOW_SHOWN: {
                 handleDispatchWindowShown();
             }
+            break;
+            case MSG_DISPATCH_THUMB_MODE_STATES: {
+                int states = msg.arg1;
+                updateThumbModeState(states);
+            } break;
             }
         }
     }
@@ -4047,8 +4196,8 @@ public final class ViewRootImpl implements ViewParent,
 
             // Remember the touch position for possible drag-initiation.
             if (event.isTouchEvent()) {
-                mLastTouchPoint.x = event.getRawX();
-                mLastTouchPoint.y = event.getRawY();
+                mLastTouchPoint.x = event.getX();
+                mLastTouchPoint.y = event.getY();
             }
             return FORWARD;
         }
@@ -5240,8 +5389,11 @@ public final class ViewRootImpl implements ViewParent,
         return false;
     }
 
-    /* drag/drop */
-    void setLocalDragState(Object obj) {
+    /**
+     * @hide
+     * drag/drop
+     */
+    public void setLocalDragState(Object obj) {
         mLocalDragState = obj;
     }
 
@@ -6290,6 +6442,13 @@ public final class ViewRootImpl implements ViewParent,
         }
     }
 
+    public void dispatchThumbModeStates(int states) {
+        Message msg = Message.obtain();
+        msg.what = MSG_DISPATCH_THUMB_MODE_STATES;
+        msg.arg1 = states;
+        mHandler.sendMessage(msg);
+    }
+
     /**
      * Post a callback to send a
      * {@link AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} event.
@@ -6854,12 +7013,21 @@ public final class ViewRootImpl implements ViewParent,
         }
 
         @Override
+        public void dispatchThumbModeStates(int states) {
+            final ViewRootImpl viewAncestor = mViewAncestor.get();
+            if (viewAncestor != null) {
+                viewAncestor.dispatchThumbModeStates(states);
+            }
+        }
+
+        @Override
         public void dispatchWindowShown() {
             final ViewRootImpl viewAncestor = mViewAncestor.get();
             if (viewAncestor != null) {
                 viewAncestor.dispatchWindowShown();
             }
         }
+
     }
 
     public static final class CalledFromWrongThreadException extends AndroidRuntimeException {
diff --git a/core/java/android/view/WindowManager.java b/core/java/android/view/WindowManager.java
index 36f593e..21f3730 100644
--- a/core/java/android/view/WindowManager.java
+++ b/core/java/android/view/WindowManager.java
@@ -106,6 +106,12 @@ public interface WindowManager extends ViewManager {
      */
     public void removeViewImmediate(View view);
 
+    /**
+     * @hide
+     * */
+    public void getThumbModeCrop(Rect outCrop);
+
+
     public static class LayoutParams extends ViewGroup.LayoutParams
             implements Parcelable {
         /**
@@ -574,6 +580,11 @@ public interface WindowManager extends ViewManager {
         public static final int TYPE_KEYGUARD_PANEL = FIRST_SYSTEM_WINDOW+998;
 
         /**
+         * @hide
+         */
+        public static final int TYPE_SIDEBAR_TOOLS = FIRST_SYSTEM_WINDOW+34;
+
+        /**
          * End of types of system windows.
          */
         public static final int LAST_SYSTEM_WINDOW      = 2999;
@@ -1127,6 +1138,10 @@ public interface WindowManager extends ViewManager {
          */
         public static final int PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS = 0x00000800;
 
+        /** {@hide} */
+        // SmartisanOS Ext
+        public static final int PRIVATE_FLAG_EXT_FORCE_FULL_SCREEN = 0x00100000;
+
         /**
          * Flag to force the status bar window to be visible all the time. If the bar is hidden when
          * this flag is set it will be shown again and the bar will have a transparent background.
@@ -1649,6 +1664,12 @@ public interface WindowManager extends ViewManager {
          */
         public float blurMaskAlphaThreshold = 0.0f;
 
+        /**
+         * for window eat the home key not pass to back app
+         * @hide
+         */
+        public boolean isEatHomeKey;
+
         public LayoutParams() {
             super(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
             type = TYPE_APPLICATION;
@@ -1757,6 +1778,7 @@ public interface WindowManager extends ViewManager {
             out.writeInt(hasManualSurfaceInsets ? 1 : 0);
             out.writeInt(needsMenuKey);
             out.writeFloat(blurMaskAlphaThreshold);
+            out.writeInt(isEatHomeKey ? 1 : 0);
         }
 
         public static final Parcelable.Creator<LayoutParams> CREATOR
@@ -1809,6 +1831,7 @@ public interface WindowManager extends ViewManager {
             hasManualSurfaceInsets = in.readInt() != 0;
             needsMenuKey = in.readInt();
             blurMaskAlphaThreshold = in.readFloat();
+            isEatHomeKey = in.readInt() != 0;
         }
 
         @SuppressWarnings({"PointlessBitwiseExpression"})
@@ -2010,6 +2033,10 @@ public interface WindowManager extends ViewManager {
                 changes |= SURFACE_INSETS_CHANGED;
             }
 
+            if (isEatHomeKey != o.isEatHomeKey) {
+                isEatHomeKey = o.isEatHomeKey;
+            }
+
             if (needsMenuKey != o.needsMenuKey) {
                 needsMenuKey = o.needsMenuKey;
                 changes |= NEEDS_MENU_KEY_CHANGED;
diff --git a/core/java/android/view/WindowManagerGlobal.java b/core/java/android/view/WindowManagerGlobal.java
index 606168c..c0683ac 100644
--- a/core/java/android/view/WindowManagerGlobal.java
+++ b/core/java/android/view/WindowManagerGlobal.java
@@ -22,6 +22,7 @@ import android.content.ComponentCallbacks2;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.res.Configuration;
+import android.graphics.Rect;
 import android.os.IBinder;
 import android.os.RemoteException;
 import android.os.ServiceManager;
@@ -228,6 +229,16 @@ public final class WindowManagerGlobal {
         return null;
     }
 
+    public void getThumbModeCrop(Rect outCrop) {
+        if(sWindowSession == null) return;
+
+        try {
+            sWindowSession.getThumbModeCrop(outCrop);
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+    }
+
     public void addView(View view, ViewGroup.LayoutParams params,
             Display display, Window parentWindow) {
         if (view == null) {
diff --git a/core/java/android/view/WindowManagerImpl.java b/core/java/android/view/WindowManagerImpl.java
index 95e291c..1646556 100644
--- a/core/java/android/view/WindowManagerImpl.java
+++ b/core/java/android/view/WindowManagerImpl.java
@@ -17,6 +17,7 @@
 package android.view;
 
 import android.annotation.NonNull;
+import android.graphics.Rect;
 import android.os.IBinder;
 
 /**
@@ -122,4 +123,12 @@ public final class WindowManagerImpl implements WindowManager {
     public Display getDefaultDisplay() {
         return mDisplay;
     }
+
+    /**
+     * @hide
+     * */
+    @Override
+    public void getThumbModeCrop(Rect outCrop) {
+        mGlobal.getThumbModeCrop(outCrop);
+    }
 }
diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index 9d7c741..4d60831 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -388,6 +388,16 @@ public interface WindowManagerPolicy {
          * Check whether the window is currently dimming.
          */
         public boolean isDimming();
+
+        /**
+         * @hide
+         * */
+        public int getHintWidth();
+
+        /**
+         * @hide
+         * */
+        public boolean isSidebarSideView();
     }
 
     /**
@@ -401,6 +411,16 @@ public interface WindowManagerPolicy {
         void dismiss();
     }
 
+    public interface ThumbModeFuncs {
+
+        // thumb state trigger action
+        public static final int ACTION_NONE = -1;
+        public static final int ACTION_RESET = 0;
+        public static final int ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR = 2;
+        public static final int ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR = 3;
+
+        void requestTraversalToThumbMode(int action);
+    }
     /**
      * Interface for calling back in to the window manager that is private
      * between it and the policy.
@@ -508,13 +528,15 @@ public interface WindowManagerPolicy {
      * @param context The system context we are running in.
      */
     public void init(Context context, IWindowManager windowManager,
-            WindowManagerFuncs windowManagerFuncs);
+            WindowManagerFuncs windowManagerFuncs, ThumbModeFuncs thumbModeFuncs);
 
     /**
      * @return true if com.android.internal.R.bool#config_forceDefaultOrientation is true.
      */
     public boolean isDefaultOrientationForced();
 
+    public void setThumbOffset( int scaleModeVertOffsetS, int scaleModeHoriOffsetS,  int screenWidth, int screenHeight);
+
     /**
      * Called by window manager once it has the initial, default native
      * display dimensions.
@@ -921,6 +943,8 @@ public interface WindowManagerPolicy {
     static final int FINISH_LAYOUT_REDO_WALLPAPER = 0x0004;
     /** Need to recompute animations */
     static final int FINISH_LAYOUT_REDO_ANIM = 0x0008;
+    /** Need to inform ThumbModeHelper full screen status*/
+    static final int FINISH_LAYOUT_TOP_FULLSCREEN = 0x0010;
     
     /**
      * Called following layout of all windows before each window has policy applied.
@@ -1329,4 +1353,10 @@ public interface WindowManagerPolicy {
     public void startKeyguardExitAnimation(long startTime, long fadeoutDuration);
 
     public void setLiveLockscreenEdgeDetector(boolean enable);
+
+    public void updateThumbGestureDetectListener(boolean enabled);
+
+    public void dispatchThumbState(int thumbState);
+
+    public void dispatchThumbInterSize(float size);
 }
diff --git a/core/java/android/view/onestep/IOneStep.aidl b/core/java/android/view/onestep/IOneStep.aidl
new file mode 100644
index 0000000..8c9cbdb
--- /dev/null
+++ b/core/java/android/view/onestep/IOneStep.aidl
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) 2016, The Smartisan Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+package android.view.onestep;
+
+import android.content.ComponentName;
+
+/** @hide */
+oneway interface IOneStep {
+    void resumeOneStep();
+    void updateOngoing(in ComponentName name, int token, int pendingNumbers, CharSequence title, int pid);
+    void setEnabled(boolean enabled);
+}
+
diff --git a/core/java/android/view/onestep/IOneStepManager.aidl b/core/java/android/view/onestep/IOneStepManager.aidl
new file mode 100644
index 0000000..1160399
--- /dev/null
+++ b/core/java/android/view/onestep/IOneStepManager.aidl
@@ -0,0 +1,67 @@
+/**
+ * Copyright (c) 2016, The Smartisan Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+package android.view.onestep;
+
+import android.view.onestep.IOneStep;
+import android.view.onestep.IOneStepStateObserver;
+import android.content.ComponentName;
+
+/** @hide */
+interface IOneStepManager {
+
+    /**
+     * Set a observer to monitor state change.
+     */
+    void registerStateObserver(IOneStepStateObserver observer);
+
+    /**
+     * Clear the observer.
+     */
+    void unregisterStateObserver(IOneStepStateObserver observer);
+
+    /**
+     * Bind the onestep instance.( packages/apps/OneStep).
+     */
+    void bindOneStepUI(IOneStep oneStep);
+
+    // Need the OneStep_SERVICE permission
+    void resetWindow();
+
+    // NOT need the OneStep_SERVICE permission
+    boolean isInOneStepMode();
+
+    // NOT need the OneStep_SERVICE permission
+    int getOneStepModeState();
+
+    // NOT need the OneStep_SERVICE permission
+    boolean isFocusedOnOneStep();
+
+    // Need the OneStep_SERVICE permission
+    void requestEnterLastMode();
+
+    void resumeOneStep();
+
+    void updateOngoing(in ComponentName name, int token, int pendingNumbers, CharSequence title, int pid);
+
+    // Need the OneStep_SERVICE permission
+    void requestExitOneStepMode();
+
+    // Need the OneStep_SERVICE permission
+    void requestEnterOneStepMode(int mode);
+
+    void setEnabled(boolean enabled);
+}
diff --git a/core/java/android/view/onestep/IOneStepStateObserver.aidl b/core/java/android/view/onestep/IOneStepStateObserver.aidl
new file mode 100644
index 0000000..dbaaa72
--- /dev/null
+++ b/core/java/android/view/onestep/IOneStepStateObserver.aidl
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) 2016, The Smartisan Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+package android.view.onestep;
+
+/** @hide */
+oneway interface IOneStepStateObserver{
+    void onEnterOneStepMode(int state);
+    void onExitOneStepMode();
+}
+
diff --git a/core/java/android/view/onestep/OneStepManager.java b/core/java/android/view/onestep/OneStepManager.java
new file mode 100644
index 0000000..ea4531c
--- /dev/null
+++ b/core/java/android/view/onestep/OneStepManager.java
@@ -0,0 +1,59 @@
+
+package android.view.onestep;
+
+import android.content.ComponentName;
+import android.os.Handler;
+import android.view.onestep.IOneStep;
+
+/** {@hide} */
+public interface OneStepManager {
+
+    public static final int BIT_SIDEBAR_IN_NONE_MODE = 0;
+
+    public static final int BIT_SIDEBAR_IN_LEFT_TOP_MODE = 1 << 0;
+
+    public static final int BIT_SIDEBAR_IN_RIGHT_TOP_MODE = 1 << 1;
+
+    public static interface OneStepStateObserver {
+        public void onEnterOneStepMode(int state);;
+
+        public void onExitOneStepMode();
+    }
+
+    public void registerStateObserver(OneStepStateObserver observer, Handler handler);
+
+    public void unregisterStateObserver(OneStepStateObserver observer);
+
+    /**
+     * Bind the onestep UI.( packages/apps/OneStep)
+     */
+    public void bindOneStepUI(IOneStep onestep);
+
+    // Need the OneStep_SERVICE permission
+    public void resetWindow();
+
+    // NOT need the OneStep_SERVICE permission
+    public boolean isInOneStepMode();
+
+    // NOT need the OneStep_SERVICE permission
+    public int getOneStepModeState();
+
+    // NOT need the OneStep_SERVICE permission
+    boolean isFocusedOnOneStep();
+
+    // Need the OneStep_SERVICE permission
+    public void requestEnterLastMode();
+
+    public void resumeOneStep();
+
+    public void updateOngoing(ComponentName name, int token, int pendingNumbers,
+            CharSequence title, int pid);
+
+    // Need the OneStep_SERVICE permission
+    public void requestExitOneStepMode();
+
+    // Need the OneStep_SERVICE permission
+    public void requestEnterOneStepMode(int mode);
+
+    public void setEnabled(boolean enabled);
+}
diff --git a/core/java/android/view/onestep/OneStepManagerImpl.java b/core/java/android/view/onestep/OneStepManagerImpl.java
new file mode 100644
index 0000000..104445d
--- /dev/null
+++ b/core/java/android/view/onestep/OneStepManagerImpl.java
@@ -0,0 +1,219 @@
+
+package android.view.onestep;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import com.android.internal.annotations.GuardedBy;
+import com.android.internal.os.SomeArgs;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.util.Singleton;
+import android.view.Display;
+
+/**
+ * @author smartisan
+ * @hide
+ */
+public final class OneStepManagerImpl implements OneStepManager {
+    @GuardedBy("mDelegates")
+    private final ArrayList<OneStepStateObserverDelegate> mDelegates = new ArrayList<OneStepStateObserverDelegate>();
+
+    public OneStepManagerImpl(Context context) {
+    }
+
+    private static final Singleton<IOneStepManager> sInstanse = new Singleton<IOneStepManager>() {
+        protected IOneStepManager create() {
+            IBinder b = ServiceManager.getService(Context.ONE_STEP_SERVICE);
+            IOneStepManager oneStepManager = IOneStepManager.Stub.asInterface(b);
+            return oneStepManager;
+        }
+    };
+
+    /** {@hide} */
+    private static class OneStepStateObserverDelegate extends IOneStepStateObserver.Stub implements
+            Handler.Callback {
+        private static final int MSG_ENTER = 1;
+        private static final int MSG_EXIT = 2;
+
+        final OneStepStateObserver mObserver;
+        final Handler mHandler;
+
+        public OneStepStateObserverDelegate(OneStepStateObserver observer, Looper looper) {
+            mObserver = observer;
+            mHandler = new Handler(looper, this);
+        }
+
+        @Override
+        public boolean handleMessage(Message msg) {
+            switch (msg.what) {
+                case MSG_ENTER: {
+                    final SomeArgs args = (SomeArgs) msg.obj;
+                    mObserver.onEnterOneStepMode(args.argi1);
+                    args.recycle();
+                    return true;
+                }
+                case MSG_EXIT: {
+                    mObserver.onExitOneStepMode();
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public void onEnterOneStepMode(int state) throws RemoteException {
+            final SomeArgs args = SomeArgs.obtain();
+            args.argi1 = state;
+            mHandler.obtainMessage(MSG_ENTER, args).sendToTarget();
+        }
+
+        @Override
+        public void onExitOneStepMode() throws RemoteException {
+            mHandler.obtainMessage(MSG_EXIT).sendToTarget();
+        }
+    }
+
+    @Override
+    public void registerStateObserver(OneStepStateObserver observer, Handler handler) {
+        synchronized (mDelegates) {
+            final OneStepStateObserverDelegate delegate = new OneStepStateObserverDelegate(
+                    observer, handler.getLooper());
+            try {
+                sInstanse.get().registerStateObserver(delegate);
+            } catch (RemoteException e) {
+                throw e.rethrowAsRuntimeException();
+            }
+            mDelegates.add(delegate);
+        }
+    }
+
+    @Override
+    public void unregisterStateObserver(OneStepStateObserver observer) {
+        synchronized (mDelegates) {
+            for (Iterator<OneStepStateObserverDelegate> i = mDelegates.iterator(); i.hasNext();) {
+                final OneStepStateObserverDelegate delegate = i.next();
+                if (delegate.mObserver == observer) {
+                    try {
+                        sInstanse.get().unregisterStateObserver(delegate);
+                    } catch (RemoteException e) {
+                        throw e.rethrowAsRuntimeException();
+                    }
+                    i.remove();
+                }
+            }
+        }
+    }
+
+    @Override
+    public void bindOneStepUI(IOneStep onestep) {
+        try {
+            sInstanse.get().bindOneStepUI(onestep);
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void resetWindow() {
+        try {
+            sInstanse.get().resetWindow();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public boolean isInOneStepMode() {
+        try {
+            sInstanse.get().isInOneStepMode();
+            ;
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+        return false;
+    }
+
+    @Override
+    public int getOneStepModeState() {
+        try {
+            sInstanse.get().getOneStepModeState();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+        return 0;
+    }
+
+    @Override
+    public boolean isFocusedOnOneStep() {
+        try {
+            sInstanse.get().isFocusedOnOneStep();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+        return false;
+    }
+
+    @Override
+    public void requestEnterLastMode() {
+        try {
+            sInstanse.get().requestEnterLastMode();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void requestEnterOneStepMode(int mode) {
+        try {
+            sInstanse.get().requestEnterOneStepMode(mode);
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void requestExitOneStepMode() {
+        try {
+            sInstanse.get().requestExitOneStepMode();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void resumeOneStep() {
+        try {
+            sInstanse.get().resumeOneStep();
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void updateOngoing(ComponentName name, int token, int pendingNumbers,
+            CharSequence title, int pid) {
+        try {
+            sInstanse.get().updateOngoing(name, token, pendingNumbers, title, pid);
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        try {
+            sInstanse.get().setEnabled(enabled);
+        } catch (RemoteException e) {
+            throw e.rethrowAsRuntimeException();
+        }
+    }
+
+}
diff --git a/core/java/android/widget/Toast.java b/core/java/android/widget/Toast.java
index e8dccab..f89d1ec 100644
--- a/core/java/android/widget/Toast.java
+++ b/core/java/android/widget/Toast.java
@@ -290,6 +290,27 @@ public class Toast {
     }
 
     /**
+     * add for smartisan os
+     *
+     * @hide
+     */
+    public static Toast makeText(Context context, CharSequence text, int duration, int type) {
+        Toast result = makeText(context, text, duration);
+        result.setToastWindowType(type);
+        return result;
+
+    }
+
+    /**
+     * add for smartisan os
+     */
+    private void setToastWindowType(int type) {
+        if (mTN != null) {
+            mTN.setWindowType(type);
+        }
+    }
+
+    /**
      * Update the text in a Toast that was previously created using one of the makeText() methods.
      * @param resId The new text for the Toast.
      */
@@ -476,5 +497,16 @@ public class Toast {
                 mView = null;
             }
         }
+
+        /**
+         * add for smartisan os
+         *
+         * @hide
+         */
+        public void setWindowType(int type) {
+            if (mParams != null) {
+                mParams.type = type;
+            }
+        }
     }
 }
diff --git a/core/java/com/android/internal/view/BaseIWindow.java b/core/java/com/android/internal/view/BaseIWindow.java
index 3eeabcd..e13db75 100644
--- a/core/java/com/android/internal/view/BaseIWindow.java
+++ b/core/java/com/android/internal/view/BaseIWindow.java
@@ -110,4 +110,7 @@ public class BaseIWindow extends IWindow.Stub {
     @Override
     public void dispatchWindowShown() {
     }
+
+    @Override
+    public void dispatchThumbModeStates(int states) {}
 }
diff --git a/core/jni/android_view_InputEventSender.cpp b/core/jni/android_view_InputEventSender.cpp
index d61dee7..d721047 100644
--- a/core/jni/android_view_InputEventSender.cpp
+++ b/core/jni/android_view_InputEventSender.cpp
@@ -142,7 +142,9 @@ status_t NativeInputEventSender::sendMotionEvent(uint32_t seq, const MotionEvent
                 event->getXPrecision(), event->getYPrecision(),
                 event->getDownTime(), event->getHistoricalEventTime(i),
                 event->getPointerCount(), event->getPointerProperties(),
-                event->getHistoricalRawPointerCoords(0, i));
+                event->getHistoricalRawPointerCoords(0, i),
+                event->getThumbMode(),
+                event->getScaleFactor());
         if (status) {
             ALOGW("Failed to send motion event sample on channel '%s'.  status=%d",
                     getInputChannelName(), status);
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index 84c3a9c..17d967b 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -1858,6 +1858,13 @@
     <permission android:name="android.permission.STATUS_BAR_SERVICE"
         android:protectionLevel="signature" />
 
+    <!-- Allows an application to be the side bar.Not for use by third party apps. 
+    @hide -->
+    <permission android:name="android.permission.ONE_STEP_SERVICE"
+        android:label="@string/permgrouplab_sideBarService"
+        android:description="@string/permgroupdesc_sideBarService"
+        android:protectionLevel="signature" />
+
     <!-- @SystemApi Allows an application to force a BACK operation on whatever is the
          top activity.
          <p>Not for use by third-party applications.
diff --git a/core/res/res/anim/dock_fade_enter.xml b/core/res/res/anim/dock_fade_enter.xml
new file mode 100644
index 0000000..6135e03
--- /dev/null
+++ b/core/res/res/anim/dock_fade_enter.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="250"
+    android:fromAlpha="0.0"
+    android:interpolator="@interpolator/decelerate_cubic"
+    android:toAlpha="1.0" />
diff --git a/core/res/res/anim/dock_fade_exit.xml b/core/res/res/anim/dock_fade_exit.xml
new file mode 100644
index 0000000..6f4baaa
--- /dev/null
+++ b/core/res/res/anim/dock_fade_exit.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="100"
+    android:fromAlpha="1.0"
+    android:interpolator="@interpolator/decelerate_cubic"
+    android:toAlpha="0.0" />
diff --git a/core/res/res/anim/thumb_wallpaper_close.xml b/core/res/res/anim/thumb_wallpaper_close.xml
new file mode 100644
index 0000000..6de9fc0
--- /dev/null
+++ b/core/res/res/anim/thumb_wallpaper_close.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <alpha android:fromAlpha="1.0" android:toAlpha="0.3"
+            android:startOffset="60"
+            android:duration="100"/>
+</set>
diff --git a/core/res/res/anim/thumb_wallpaper_enter.xml b/core/res/res/anim/thumb_wallpaper_enter.xml
new file mode 100644
index 0000000..9c2c75a
--- /dev/null
+++ b/core/res/res/anim/thumb_wallpaper_enter.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <alpha android:fromAlpha="0.6" android:toAlpha="1.0"
+            android:startOffset="50"
+            android:duration="120"/>
+</set>
diff --git a/core/res/res/drawable-xxhdpi/shadow_thumb_mode.png b/core/res/res/drawable-xxhdpi/shadow_thumb_mode.png
new file mode 100644
index 0000000000000000000000000000000000000000..c3da9e90912bc17760278f0b54e1fe85849b4120
GIT binary patch
literal 964
zcmaJ=zi-n(6m~&^s-g>G0H)KGG7;aM6Q{MQDM_5PuIj2vBayKe``Vb+KG(hww<Cf9
ziH(InfeA5!7!U)M5E}yn{{dp?%7i$lNy?D+B>V23-uJ!l{kRvK8!NLjw`UYZnRQm}
zrrf9Gr%qpy|6eERW4YZD^|sjJJEBh$rc`|1VZaILE^9LCA0B*VONw&&PS9$Lw!3b6
zJXC4!qh?_&(TcLPoW<1JV*+&8ZV*}U<l`p@0^fp<bQimEjdg?7ql9f8ZM3|jJ<ssr
z@&mAxnUWx6f`TmEk5V(U;DFbZ=iH1S7`TW%3!aK<yPKfK69#k@7d%`hpj=W(2^%Hj
z9?&qsh-e5e6bLr;1rrl6Tu??!{2jAtH-@p~&4OJaViTc$zpwU-Do=J1F$@D?4QX0I
zdKA*bNYJbhrE?<&o26b7#3JAk$Qfye_k;zd($f^ecuX6m!!pT&p^V0es5nn)<mkE=
zyN2P|I~7fKrgtK7+B%FGYO<8~5>Ga6XD$yFo3(^d!IKu}`=csucDdkbm&c&CrK<$E
z)C;2AGC;Vl=|riZk;fd{f|5fG0^ih172Lo?Bh`ADkb0?7ZIEiQyhw;%T-2-D2y1h%
z7qUo<u>KjgcrG>{hA@_qZI%R2nBPcv2nI=;!2~U~jg5vuB%iKN)^dvVCukXBOXp&d
z6oc~C{@3b}NzPAx91pI%j7OhEa^4d;*lT~NCm%)Gu`8|YXJ=b3|I+nq@24AgZ_K~U
z=5HQ2`16PLH*2rob-iQw?b-9~<1bbC@W<b)(^$Fxed^WJ%I{wOuAKUY{kFRO^dE=0
BDVzWR

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xxhdpi/sidebar_background.png b/core/res/res/drawable-xxhdpi/sidebar_background.png
new file mode 100644
index 0000000000000000000000000000000000000000..ac49af99ae335c7f1f6dcdc439fda75982df810a
GIT binary patch
literal 80595
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

literal 0
HcmV?d00001

diff --git a/core/res/res/values/smartisanos_dimens.xml b/core/res/res/values/smartisanos_dimens.xml
new file mode 100644
index 0000000..0c24f10
--- /dev/null
+++ b/core/res/res/values/smartisanos_dimens.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+    <dimen name="sidebar_width">48dp</dimen>
+    <dimen name="drag_image_size">50dp</dimen>
+
+</resources>
diff --git a/core/res/res/values/smartisanos_strings.xml b/core/res/res/values/smartisanos_strings.xml
new file mode 100644
index 0000000..7ecb6b9
--- /dev/null
+++ b/core/res/res/values/smartisanos_strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgrouplab_sideBarService">Side Bar</string>
+    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgroupdesc_sideBarService">Change the device side bar settings.</string>
+</resources>
diff --git a/core/res/res/values/smartisanos_symbols.xml b/core/res/res/values/smartisanos_symbols.xml
new file mode 100644
index 0000000..650309f
--- /dev/null
+++ b/core/res/res/values/smartisanos_symbols.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<!-- added for smartisanos. we should put our symbols here -->
+<resources>
+
+  <java-symbol type="dimen" name="sidebar_width" />
+
+  <java-symbol type="drawable" name="sidebar_background" />
+  <java-symbol type="dimen" name="drag_image_size"/>
+
+  <!-- Status Bar -->
+  <java-symbol type="anim" name="dock_fade_enter" />
+  <java-symbol type="anim" name="dock_fade_exit" />
+
+  <!-- Thumb Mode -->
+  <java-symbol type="style" name="Animation.Thumbwallpaper" />
+  <java-symbol type="drawable" name="shadow_thumb_mode"/>
+</resources>
diff --git a/core/res/res/values/styles.xml b/core/res/res/values/styles.xml
index 4bad16d..9e4d10d 100644
--- a/core/res/res/values/styles.xml
+++ b/core/res/res/values/styles.xml
@@ -128,6 +128,11 @@ please see styles_device_defaults.xml.
         <item name="windowExitAnimation">@anim/translucent_exit</item>
     </style>
 
+    <style name="Animation.Thumbwallpaper">
+        <item name="windowEnterAnimation">@anim/thumb_wallpaper_enter</item>
+        <item name="windowExitAnimation">@anim/thumb_wallpaper_close</item>
+    </style>
+
     <!-- Standard animations for a non-full-screen window or activity. -->
     <style name="Animation.LockScreen">
         <item name="windowEnterAnimation">@anim/lock_screen_enter</item>
diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index 9ecbfdd..082ab31 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -237,4 +237,8 @@
 
     <!-- Default for Settings.Global.CAPTIVE_PORTAL_DETECTION_ENABLED -->
     <integer name="def_captive_portal_detection_enabled" translatable="false">1</integer>
+
+    <!-- Default for Settings.Global.SIDE_BAR_MODE
+         0 means OFF; 1 means ON-->
+    <integer name="def_side_bar_mode">1</integer>
 </resources>
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
index e4b2409..d2f0eb5 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
@@ -2993,6 +2993,7 @@ class DatabaseHelper extends SQLiteOpenHelper {
              */
             loadIntegerSetting(stmt, Settings.Global.CAPTIVE_PORTAL_DETECTION_ENABLED,
                     R.integer.def_captive_portal_detection_enabled);
+            loadIntegerSetting(stmt, Settings.Global.SIDE_BAR_MODE, R.integer.def_side_bar_mode);
         } finally {
             if (stmt != null) stmt.close();
         }
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
index c075e0b..9b7541a 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
@@ -1986,7 +1986,7 @@ public class SettingsProvider extends ContentProvider {
         }
 
         private final class UpgradeController {
-            private static final int SETTINGS_VERSION = 123;
+            private static final int SETTINGS_VERSION = 124;
             /**
              * This is the 12.1 database version (DO NOT INCREMENT)
              */
@@ -2183,6 +2183,18 @@ public class SettingsProvider extends ContentProvider {
 
                 // vXXX: Add new settings above this point.
 
+                if (currentVersion == 123) {
+                    SettingsState globalSettings = getGlobalSettingsLocked();
+                    Setting currentSettings = globalSettings.getSettingLocked(Settings.Global
+                            .SIDE_BAR_MODE);
+                    if (currentSettings == null) {
+                        int defValue = getContext().getResources().getInteger(R.integer.def_side_bar_mode);
+                        globalSettings.insertSettingLocked(Settings.Global.SIDE_BAR_MODE,
+                                String.valueOf(defValue),getCallingPackage());
+                    }
+                    currentVersion = 124;
+                }
+
                 // Return the current version.
                 return currentVersion;
             }
diff --git a/services/core/java/com/android/server/clipboard/ClipboardService.java b/services/core/java/com/android/server/clipboard/ClipboardService.java
index 1c26846..4fda159 100644
--- a/services/core/java/com/android/server/clipboard/ClipboardService.java
+++ b/services/core/java/com/android/server/clipboard/ClipboardService.java
@@ -24,7 +24,9 @@ import android.content.BroadcastReceiver;
 import android.content.ClipData;
 import android.content.ClipDescription;
 import android.content.ContentProvider;
+import android.content.CopyHistoryItem;
 import android.content.IClipboard;
+import android.content.IClipboardListener;
 import android.content.IOnPrimaryClipChangedListener;
 import android.content.Context;
 import android.content.Intent;
@@ -44,9 +46,12 @@ import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.text.Spanned;
+import android.text.TextUtils;
 import android.util.Slog;
 import android.util.SparseArray;
 
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 
@@ -63,6 +68,8 @@ public class ClipboardService extends IClipboard.Stub {
     private final PackageManager mPm;
     private final AppOpsManager mAppOps;
     private final IBinder mPermissionOwner;
+    private final CopyHistoryDatabaseHelper mDatabaseHelper;
+    private List<IClipboardListener> mListeners = new ArrayList<IClipboardListener>();
 
     private class ListenerInfo {
         final int mUid;
@@ -107,6 +114,7 @@ public class ClipboardService extends IClipboard.Stub {
             Slog.w("clipboard", "AM dead", e);
         }
         mPermissionOwner = permOwner;
+        mDatabaseHelper = new CopyHistoryDatabaseHelper(context);
 
         // Remove the clipboard if a user is removed
         IntentFilter userFilter = new IntentFilter();
@@ -157,7 +165,24 @@ public class ClipboardService extends IClipboard.Stub {
         }
     }
 
-    public void setPrimaryClip(ClipData clip, String callingPackage) {
+    private void insertClipData(ClipData clip) {
+        for (int i = 0; i < clip.getItemCount(); i++) {
+            // Get an item as text and remove all spans by toString().
+            CharSequence text = clip.getItemAt(i).coerceToText(mContext);
+            CharSequence paste = (text instanceof Spanned) ? text.toString() : text;
+            if (!TextUtils.isEmpty(paste)) {
+                mDatabaseHelper.insert(paste.toString());
+                notifyListener();
+            }
+        }
+    }
+
+    public void setPrimaryClip(ClipData clip, boolean inHistory, String callingPackage) {
+        // some inputmethod send emoji by setPrimaryClip, disable it !
+        if (callingPackage != null && callingPackage.contains("inputmethod")) {
+            inHistory = false;
+        }
+
         synchronized (this) {
             if (clip != null && clip.getItemCount() <= 0) {
                 throw new IllegalArgumentException("No items");
@@ -172,6 +197,12 @@ public class ClipboardService extends IClipboard.Stub {
             PerUserClipboard clipboard = getClipboard(userId);
             revokeUris(clipboard);
             setPrimaryClipInternal(clipboard, clip);
+
+            // add to copy history
+            if (inHistory) {
+                insertClipData(clip);
+            }
+
             List<UserInfo> related = getRelatedProfiles(userId);
             if (related != null) {
                 int size = related.size();
@@ -423,4 +454,65 @@ public class ClipboardService extends IClipboard.Stub {
             revokeItemLocked(clipboard.primaryClip.getItemAt(i));
         }
     }
+
+    public List<CopyHistoryItem> getCopyHistory(){
+        return mDatabaseHelper.getCopyHistory();
+    }
+
+    public void clearCopyHistory() {
+        mDatabaseHelper.clearCopyHistory();
+        notifyListener();
+    }
+
+    public void delete(CopyHistoryItem item) {
+        mDatabaseHelper.delete(item);
+        notifyListener();
+    }
+
+    public void registerListener(IClipboardListener listener) {
+        monitor(listener);
+        synchronized (mListeners) {
+            mListeners.add(listener);
+        }
+    }
+
+    private void notifyListener() {
+        Intent intent = new Intent("android.intent.action.CopyHistoryChange");
+        mContext.sendBroadcast(intent);
+        synchronized (mListeners) {
+            for (IClipboardListener listener : mListeners) {
+                try {
+                    listener.onCopyHistoryChanged();
+                } catch (RemoteException e) {
+                    // NA
+                }
+            }
+        }
+    }
+
+    private void monitor(IClipboardListener listener) {
+        new BinderMonitor(listener);
+    }
+
+    private class BinderMonitor implements IBinder.DeathRecipient {
+
+        private IClipboardListener mListener;
+
+        public BinderMonitor(IClipboardListener listener) {
+            mListener = listener;
+            try {
+                listener.asBinder().linkToDeath(this, 0);
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void binderDied() {
+            mListener.asBinder().unlinkToDeath(this, 0);
+            synchronized (mListeners) {
+                mListeners.remove(mListener);
+            }
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/clipboard/CopyHistoryDatabaseHelper.java b/services/core/java/com/android/server/clipboard/CopyHistoryDatabaseHelper.java
new file mode 100644
index 0000000..5f09ff624
--- /dev/null
+++ b/services/core/java/com/android/server/clipboard/CopyHistoryDatabaseHelper.java
@@ -0,0 +1,172 @@
+package com.android.server.clipboard;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.CopyHistoryItem;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.Looper;
+import android.os.Message;
+import android.provider.BaseColumns;
+
+public class CopyHistoryDatabaseHelper extends SQLiteOpenHelper {
+    private static final String TAG = CopyHistoryDatabaseHelper.class.getName();
+
+    private static final int DATABASE_VERSION = 1;
+    private static final String DATABASE_NAME = "copy_history.db";
+
+    private static final int MAX_SIZE = 1024;
+    private List<CopyHistoryItem> mList = new ArrayList<CopyHistoryItem>();
+    private Context mContext;
+    private Handler mHandler;
+    CopyHistoryDatabaseHelper(Context context) {
+        super(context, DATABASE_NAME, null, DATABASE_VERSION);
+        mContext = context;
+        HandlerThread thread = new HandlerThread(TAG);
+        thread.start();
+        mHandler = new CopyHandler(thread.getLooper());
+        mHandler.obtainMessage(MSG_INIT_LIST).sendToTarget();
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL("CREATE TABLE copyhistory ("
+                + "_id INTEGER PRIMARY KEY AUTOINCREMENT," + "content TEXT,"
+                + "timestamp TEXT" + ");");
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        // nothing to do now.
+    }
+
+    private void initList() {
+        List<CopyHistoryItem> list = new ArrayList<CopyHistoryItem>();
+        Cursor cursor = this.getReadableDatabase().query(TABLE_COPYHISTORY,
+                null, null, null, null, null, null);
+        if (cursor != null) {
+            try {
+                if (cursor.moveToFirst()) {
+                    do {
+                        String content = cursor.getString(cursor.getColumnIndex(CopyHistoryColumns.CONTENT));
+                        long timestamp = Long.parseLong(cursor.getString(cursor.getColumnIndex(CopyHistoryColumns.TIMESTAMP)));
+                        list.add(new CopyHistoryItem(content, timestamp));
+                    } while (cursor.moveToNext());
+                }
+            } finally {
+                cursor.close();
+            }
+            Collections.sort(list);
+            synchronized (mList) {
+                mList.addAll(list);
+            }
+        }
+    }
+
+    public List<CopyHistoryItem> getCopyHistory() {
+        List<CopyHistoryItem> list = new ArrayList<CopyHistoryItem>();
+        synchronized(mList){
+            list.addAll(mList);
+        }
+        return list;
+    }
+
+    public void clearCopyHistory(){
+        synchronized(mList){
+            mList.clear();
+        }
+        mHandler.obtainMessage(MSG_CLEAR).sendToTarget();
+    }
+
+    public void delete(CopyHistoryItem item) {
+        if (item != null) {
+            synchronized (mList) {
+                for (int i = 0; i < mList.size(); ++i) {
+                    if (item.equals(mList.get(i))) {
+                        mList.remove(i);
+                        i--;
+                        mHandler.obtainMessage(MSG_DEL, item).sendToTarget();
+                        // we assume that only one match
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    public void insert(String content) {
+        synchronized(mList){
+            if (mList.size() > 0) {
+                String first = mList.get(0).mContent;
+                if (first != null && first.equals(content)) {
+                    return;
+                }
+            }
+            CopyHistoryItem item = new CopyHistoryItem(content, System.currentTimeMillis());
+            mList.add(0, item);
+            if(mList.size() > MAX_SIZE){
+                CopyHistoryItem toDel = mList.get(mList.size() - 1);
+                mList.remove(mList.size() - 1);
+                mHandler.obtainMessage(MSG_DEL, toDel).sendToTarget();
+            }
+            mHandler.obtainMessage(MSG_INSERT, item).sendToTarget();
+        }
+    }
+
+    private void insert(CopyHistoryItem item) {
+        ContentValues cv = new ContentValues();
+        cv.put(CopyHistoryColumns.CONTENT, item.mContent);
+        cv.put(CopyHistoryColumns.TIMESTAMP, item.mTimeStamp);
+        getWritableDatabase().insert(TABLE_COPYHISTORY, null, cv);
+    }
+
+    private void deleteFromDatabase(CopyHistoryItem item) {
+        getWritableDatabase().delete(
+                TABLE_COPYHISTORY,
+                CopyHistoryColumns.CONTENT + " = ?" + " and "
+                        + CopyHistoryColumns.TIMESTAMP + " = ?",
+                new String[] { item.mContent, item.mTimeStamp + "" });
+    }
+
+    private static final String TABLE_COPYHISTORY = "copyhistory";
+
+    static final class CopyHistoryColumns implements BaseColumns {
+        static final String CONTENT = "content";
+        static final String TIMESTAMP = "timestamp";
+    }
+
+    private static final int MSG_INSERT = 0;
+    private static final int MSG_DEL = 1;
+    private static final int MSG_CLEAR = 2;
+    private static final int MSG_INIT_LIST = 3;
+    private class CopyHandler extends Handler{
+        public CopyHandler(Looper looper) {
+            super(looper, null, false);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch(msg.what){
+            case MSG_INIT_LIST:
+                initList();
+                break;
+            case MSG_INSERT:
+                insert((CopyHistoryItem) msg.obj);
+                break;
+            case MSG_DEL:
+                deleteFromDatabase((CopyHistoryItem) msg.obj);
+                break;
+            case MSG_CLEAR:
+                getWritableDatabase().delete(TABLE_COPYHISTORY, null, null);
+                break;
+            }
+        }
+    }
+}
diff --git a/services/core/java/com/android/server/input/InputWindowHandle.java b/services/core/java/com/android/server/input/InputWindowHandle.java
index 9149fcc..9a260b5 100644
--- a/services/core/java/com/android/server/input/InputWindowHandle.java
+++ b/services/core/java/com/android/server/input/InputWindowHandle.java
@@ -90,6 +90,8 @@ public final class InputWindowHandle {
     // Display this input is on.
     public final int displayId;
 
+    public boolean inThumbMode;
+
     private native void nativeDispose();
 
     public InputWindowHandle(InputApplicationHandle inputApplicationHandle,
diff --git a/services/core/java/com/android/server/onestep/OneStepManagerService.java b/services/core/java/com/android/server/onestep/OneStepManagerService.java
new file mode 100644
index 0000000..e735f49
--- /dev/null
+++ b/services/core/java/com/android/server/onestep/OneStepManagerService.java
@@ -0,0 +1,292 @@
+
+package com.android.server.onestep;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.os.Binder;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.RemoteCallbackList;
+import android.os.SystemProperties;
+import android.util.Slog;
+import android.util.SparseIntArray;
+import android.view.ViewRootImpl;
+import android.view.WindowManagerPolicy;
+import android.view.onestep.IOneStepManager;
+import android.view.onestep.IOneStepStateObserver;
+import android.view.onestep.IOneStep;
+import android.view.onestep.OneStepManager;
+
+import com.android.internal.os.SomeArgs;
+import com.android.server.FgThread;
+import com.android.server.wm.ThumbModeHelper;
+import com.android.server.wm.ThumbModeHelper.OnThumbEventsCallbacks;
+import com.android.server.wm.WindowManagerService;
+
+public class OneStepManagerService extends IOneStepManager.Stub {
+
+    public static final String TAG = "OneStepManagerService";
+    public static final boolean DEBUG = SystemProperties.getInt("ro.debuggable", 0) == 1;
+
+    private Context mContext;
+    private WindowManagerService mWindowService;
+    private volatile IOneStep mBar;
+    private ThumbModeHelper mThumbModeHelper;
+    private StateCallbacks mStateCallbacks;
+    private int mSideBarMode = OneStepManager.BIT_SIDEBAR_IN_NONE_MODE;
+    private int mLastResetMode = OneStepManager.BIT_SIDEBAR_IN_NONE_MODE;
+
+    /**
+     * Construct the service, add the status bar view to the window manager
+     */
+    public OneStepManagerService(Context context, WindowManagerService windowManager) {
+        mContext = context;
+        mWindowService = windowManager;
+        mThumbModeHelper = ThumbModeHelper.getInstance();
+        mStateCallbacks = new StateCallbacks(FgThread.get().getLooper());
+
+        mThumbModeHelper.setThumbEventsListener(new OnThumbEventsCallbacks() {
+            @Override
+            public void onEnterSidebarMode(final int state) {
+                if ((state & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0) {
+                    mSideBarMode = OneStepManager.BIT_SIDEBAR_IN_RIGHT_TOP_MODE;
+                } else if ((state & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0) {
+                    mSideBarMode = OneStepManager.BIT_SIDEBAR_IN_LEFT_TOP_MODE;
+                } else {
+                    return;
+                }
+                if (mStateCallbacks != null) {
+                    mStateCallbacks.notifyEnterState(mSideBarMode);
+                }
+            }
+
+            @Override
+            public void onExitSidebarMode() {
+                mSideBarMode = OneStepManager.BIT_SIDEBAR_IN_NONE_MODE;
+                if (mStateCallbacks != null) {
+                    mStateCallbacks.notifyExitState();
+                }
+            }
+        });
+
+    }
+
+    @Override
+    public void bindOneStepUI(IOneStep bar) {
+        enforceSidebarService();
+        Slog.d(TAG, "[Uid: " + Binder.getCallingUid() + ", Pid: " + Binder.getCallingPid()
+                + "] bindOneStepUI bar=" + bar);
+        mBar = bar;
+    }
+
+    @Override
+    public void resetWindow() {
+        enforceSidebarService();
+        Slog.d(TAG, "[Uid: " + Binder.getCallingUid() + ", Pid: " + Binder.getCallingPid()
+                + "] resetWindow");
+        if (isInOneStepMode()) {
+            if (mThumbModeHelper != null) {
+                mThumbModeHelper.resetWindowState();
+            }
+        } else {
+            Slog.w(TAG, "Not in sidebar mode, no need to resetWindow");
+        }
+    }
+
+    @Override
+    public boolean isInOneStepMode() {
+        return mSideBarMode != OneStepManager.BIT_SIDEBAR_IN_NONE_MODE;
+    }
+
+    @Override
+    public void requestEnterOneStepMode(int mode) {
+        enforceSidebarService();
+        Slog.d(TAG, "[Uid: " + Binder.getCallingUid() + ", Pid: " + Binder.getCallingPid()
+                + "] requestEnterSidebarMode");
+
+        if (mode != OneStepManager.BIT_SIDEBAR_IN_LEFT_TOP_MODE
+                && mode != OneStepManager.BIT_SIDEBAR_IN_RIGHT_TOP_MODE) {
+            Slog.w(TAG, "requestEnterSidebarMode request code error: " + mode);
+            return;
+        }
+        if (isInOneStepMode()) {
+            Slog.w(TAG, "Already in sidebar mode, do nothing");
+        } else {
+            if (mThumbModeHelper != null) {
+                mThumbModeHelper
+                        .requestTraversalToThumbMode(mode == OneStepManager.BIT_SIDEBAR_IN_LEFT_TOP_MODE ? android.view.WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR
+                                : android.view.WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR);
+            }
+        }
+    }
+
+    @Override
+    public void requestExitOneStepMode() {
+        enforceSidebarService();
+        Slog.d(TAG, "[Uid: " + Binder.getCallingUid() + ", Pid: " + Binder.getCallingPid()
+                + "] requestExitSidebarMode");
+
+        if (isInOneStepMode()) {
+            Slog.w(TAG, "Not in sidebar mode, no need to do ExitSidebarMode");
+        } else {
+            mLastResetMode = mSideBarMode;
+            if (mThumbModeHelper != null) {
+                mThumbModeHelper.resetWindowState();
+            }
+        }
+    }
+
+    @Override
+    public void requestEnterLastMode() {
+        enforceSidebarService();
+        Slog.d(TAG, "[Uid: " + Binder.getCallingUid() + ", Pid: " + Binder.getCallingPid()
+                + "] requestEnterLastMode");
+        if (isInOneStepMode()) {
+            Slog.w(TAG, "Already in sidebar mode, do nothing");
+        } else {
+            if (mThumbModeHelper != null && mLastResetMode != OneStepManager.BIT_SIDEBAR_IN_NONE_MODE) {
+                mThumbModeHelper
+                        .requestTraversalToThumbMode(mLastResetMode == OneStepManager.BIT_SIDEBAR_IN_LEFT_TOP_MODE ? android.view.WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR
+                                : android.view.WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR);
+            }
+        }
+    }
+
+    @Override
+    public boolean isFocusedOnOneStep() {
+        if (mThumbModeHelper != null) {
+            return mThumbModeHelper.isSidebarHasFocus();
+        }
+        return false;
+    }
+
+    @Override
+    public int getOneStepModeState() {
+        return mSideBarMode;
+    }
+
+    private void enforceSidebarService() {
+        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ONE_STEP_SERVICE,
+                "SideBarManagerService");
+    }
+
+    @Override
+    public void resumeOneStep() {
+        if (!isInOneStepMode()) {
+            return;
+        }
+        if (mBar != null) {
+            try {
+                if (DEBUG) {
+                    Slog.i(TAG, "resumeSidebar ");
+                }
+                mBar.resumeOneStep();
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    @Override
+    public void updateOngoing(ComponentName name, int token, int pendingNumbers,
+            CharSequence title, int pid) throws RemoteException {
+        if (mBar != null) {
+            try {
+                if (DEBUG) {
+                    Slog.i(TAG, "updateOngoing ");
+                }
+                mBar.updateOngoing(name, token, pendingNumbers, title, pid);
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (mBar != null) {
+            try {
+                if (DEBUG) {
+                    Slog.i(TAG, "setEnabled " + enabled);
+                }
+                mBar.setEnabled(enabled);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    @Override
+    public void registerStateObserver(IOneStepStateObserver observer) throws RemoteException {
+        mStateCallbacks.register(observer);
+    }
+
+    @Override
+    public void unregisterStateObserver(IOneStepStateObserver observer) throws RemoteException {
+        mStateCallbacks.unregister(observer);
+    }
+
+    private static class StateCallbacks extends Handler {
+        private static final int MSG_ENTER = 1;
+        private static final int MSG_EXIT = 2;
+
+        private final RemoteCallbackList<IOneStepStateObserver> mCallbacks = new RemoteCallbackList<IOneStepStateObserver>();
+
+        public StateCallbacks(Looper looper) {
+            super(looper);
+        }
+
+        public void register(IOneStepStateObserver callback) {
+            mCallbacks.register(callback);
+        }
+
+        public void unregister(IOneStepStateObserver callback) {
+            mCallbacks.unregister(callback);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            final SomeArgs args = (SomeArgs) msg.obj;
+            final int n = mCallbacks.beginBroadcast();
+            for (int i = 0; i < n; i++) {
+                final IOneStepStateObserver callback = mCallbacks.getBroadcastItem(i);
+                try {
+                    invokeCallback(callback, msg.what, args);
+                } catch (RemoteException ignored) {
+                }
+            }
+            mCallbacks.finishBroadcast();
+            if (args != null) {
+                args.recycle();
+            }
+        }
+
+        private void invokeCallback(IOneStepStateObserver callback, int what, SomeArgs args)
+                throws RemoteException {
+            switch (what) {
+                case MSG_ENTER: {
+                    callback.onEnterOneStepMode(args.argi1);
+                    break;
+                }
+                case MSG_EXIT: {
+                    callback.onExitOneStepMode();
+                    break;
+                }
+            }
+        }
+
+        private void notifyEnterState(int state) {
+            final SomeArgs args = SomeArgs.obtain();
+            args.argi1 = state;
+            obtainMessage(MSG_ENTER, args).sendToTarget();
+        }
+
+        private void notifyExitState() {
+            obtainMessage(MSG_EXIT).sendToTarget();
+        }
+
+    }
+}
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 6339007..9511b43 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -108,6 +108,7 @@ import android.view.KeyCharacterMap;
 import android.view.KeyCharacterMap.FallbackAction;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
+import android.view.ViewRootImpl;
 
 import com.android.internal.logging.MetricsLogger;
 import com.android.internal.policy.PhoneWindow;
@@ -156,6 +157,9 @@ import static android.view.WindowManagerPolicy.WindowManagerFuncs.CAMERA_LENS_UN
 import static android.view.WindowManagerPolicy.WindowManagerFuncs.CAMERA_LENS_COVERED;
 import static org.cyanogenmod.platform.internal.Manifest.permission.THIRD_PARTY_KEYGUARD;
 
+import android.view.WindowManagerPolicy.PointerEventListener;
+import android.view.WindowManagerPolicy.ThumbModeFuncs;
+
 /**
  * WindowManagerPolicy implementation for the Android phone UI.  This
  * introduces a new method suffix, Lp, for an internal lock of the
@@ -218,6 +222,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     static public final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
     static public final String SYSTEM_DIALOG_REASON_HOME_KEY = "homekey";
     static public final String SYSTEM_DIALOG_REASON_ASSIST = "assist";
+    static public final String SYSTEM_DIALOG_REASON_EAT_HOME_KEY = "eathomekey";
 
     // Available custom actions to perform on a key press.
     // Must match values for KEY_HOME_LONG_PRESS_ACTION in:
@@ -286,6 +291,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private boolean mKeyguardHidden;
     private boolean mKeyguardDrawnOnce;
 
+    private static final String RESET_THUMB = "android.view.ViewRootImpl.returnNormalModeFromThumb";
+    private static final int DELAY_PENDING_DO_THUMB_ANIM = 500;
+    int mCurrentRotation = 0;
+
     /* Table of Application Launch keys.  Maps from key codes to intent categories.
      *
      * These are special keys that are used to launch particular kinds of applications,
@@ -1001,6 +1010,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     private SystemGesturesPointerEventListener mSystemGestures;
 
+    private SystemGesturesPointerEventListenerThumb mSystemGesturesThumb;
+    private ThumbModeFuncs mThumbModeFuncs;
+    private int mThumbState;
+    private float mThumbInterSize;
+    private boolean mShouldRegThumbGestureListener;
+    private static final int DELAY_APPLY_THUMB_WINDOW_MOVE_DOWN = 65;
+
     IStatusBarService getStatusBarService() {
         synchronized (mServiceAquireLock) {
             if (mStatusBarService == null) {
@@ -1451,6 +1467,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // Turn on the connected TV and switch HDMI input if we're a HDMI playback device.
         getHdmiControl().turnOnTv();
 
+        if (mFocusedWindow != null && mFocusedWindow.getAttrs().isEatHomeKey) {
+            sendCloseSystemWindows(SYSTEM_DIALOG_REASON_EAT_HOME_KEY);
+            return;
+        }
         // If there's a dream running then use home to escape the dream
         // but don't actually go home.
         if (mDreamManagerInternal != null && mDreamManagerInternal.isDreaming()) {
@@ -1570,10 +1590,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     /** {@inheritDoc} */
     @Override
     public void init(Context context, IWindowManager windowManager,
-            WindowManagerFuncs windowManagerFuncs) {
+            WindowManagerFuncs windowManagerFuncs, ThumbModeFuncs thumbModeFuncs) {
         mContext = context;
         mWindowManager = windowManager;
         mWindowManagerFuncs = windowManagerFuncs;
+        mThumbModeFuncs = thumbModeFuncs;
         mWindowManagerInternal = LocalServices.getService(WindowManagerInternal.class);
         mActivityManagerInternal = LocalServices.getService(ActivityManagerInternal.class);
         mDreamManagerInternal = LocalServices.getService(DreamManagerInternal.class);
@@ -1728,6 +1749,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             mDockMode = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,
                     Intent.EXTRA_DOCK_STATE_UNDOCKED);
         }
+        filter = new IntentFilter();
+        filter.addAction(RESET_THUMB);
+        context.registerReceiver(resetThumbReceiver, filter);
 
         // register for dream-related broadcasts
         filter = new IntentFilter();
@@ -1793,6 +1817,56 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         mOrientationListener.onTouchEnd();
                     }
                 });
+        mSystemGesturesThumb = new SystemGesturesPointerEventListenerThumb(context,
+                new SystemGesturesPointerEventListenerThumb.Callbacks() {
+
+                    @Override
+                    public void onSwipeFromTopLeftSidebar() {
+                        if ( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0
+                                && !isKeyguardLocked()
+                                && mCurrentRotation == 0) {
+                            mHandler.postDelayed(new Runnable() {
+                                @Override
+                                public void run() {
+                                    mThumbModeFuncs
+                                            .requestTraversalToThumbMode(ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR);
+                                }
+                            }, DELAY_APPLY_THUMB_WINDOW_MOVE_DOWN);
+                        }
+                    }
+                    @Override
+                    public void onSwipeFromTopRightSidebar() {
+                        if ( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0
+                                && !isKeyguardLocked()
+                                && mCurrentRotation == 0) {
+                            mHandler.postDelayed(new Runnable() {
+                                @Override
+                                public void run() {
+                                    mThumbModeFuncs
+                                            .requestTraversalToThumbMode(ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR);
+                                }
+                            }, DELAY_APPLY_THUMB_WINDOW_MOVE_DOWN);
+                        }
+                    }
+
+                    @Override
+                    public void onSwipeFromBottom() {
+                        if( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0
+                                && !isKeyguardLocked() && mCurrentRotation == 0){
+                            mThumbModeFuncs.requestTraversalToThumbMode(ThumbModeFuncs.ACTION_RESET);
+                        }
+                    }
+                    @Override
+                    public void onSwipeFromTopStatusBar() {
+                        if( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+                            expandNotiPanel();
+                        }
+                    }
+                });
+
+        mSystemGesturesThumb.setThumbState(mThumbState);
+        mSystemGesturesThumb.setThumbInterSize(mThumbInterSize);
+
         mImmersiveModeConfirmation = new ImmersiveModeConfirmation(mContext);
         mWindowManagerFuncs.registerPointerEventListener(mSystemGestures);
 
@@ -1833,6 +1907,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             finishedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);
         }
 
+        updateThumbGestureDetectListener(mShouldRegThumbGestureListener);
+
         mWindowManagerInternal.registerAppTransitionListener(
                 mStatusBarController.getAppTransitionListener());
 
@@ -1956,6 +2032,15 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mHasPermanentMenuKey = hasPermanentMenu;
     }
 
+    public void setThumbOffset( int scaleModeVertOffsetS, int scaleModeHoriOffsetS, int screenWidth, int screenHeight){
+        if(mSystemGesturesThumb != null){
+            mSystemGesturesThumb.setThumbOffset(scaleModeVertOffsetS, scaleModeHoriOffsetS, screenWidth, screenHeight);
+        }
+        if(mSystemGestures != null){
+            mSystemGestures.setThumbOffset(scaleModeVertOffsetS);
+        }
+    }
+
     @Override
     public void setInitialDisplaySize(Display display, int width, int height, int density) {
         // This method might be called before the policy has been fully initialized
@@ -2580,20 +2665,22 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         case TYPE_DISPLAY_OVERLAY:
             // used to simulate secondary display devices
             return 25;
+        case TYPE_SIDEBAR_TOOLS:
+            return 26;
         case TYPE_DRAG:
             // the drag layer: input for drag-and-drop is associated with this window,
             // which sits above all other focusable windows
-            return 26;
+            return 27;
         case TYPE_ACCESSIBILITY_OVERLAY:
             // overlay put by accessibility services to intercept user interaction
-            return 27;
-        case TYPE_SECURE_SYSTEM_OVERLAY:
             return 28;
-        case TYPE_BOOT_PROGRESS:
+        case TYPE_SECURE_SYSTEM_OVERLAY:
             return 29;
+        case TYPE_BOOT_PROGRESS:
+            return 30;
         case TYPE_POINTER:
             // the (mouse) pointer layer
-            return 30;
+            return 31;
         }
         Log.e(TAG, "Unknown window type: " + type);
         return 2;
@@ -2947,10 +3034,18 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             boolean isKeyguard = (win.getAttrs().privateFlags & PRIVATE_FLAG_KEYGUARD) != 0;
             if (transit == TRANSIT_EXIT
                     || transit == TRANSIT_HIDE) {
-                return isKeyguard ? -1 : R.anim.dock_top_exit;
+                if ( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                    return R.anim.dock_fade_exit;
+                } else {
+                    return isKeyguard ? -1 : R.anim.dock_top_exit;
+                }
             } else if (transit == TRANSIT_ENTER
                     || transit == TRANSIT_SHOW) {
-                return isKeyguard ? -1 : R.anim.dock_top_enter;
+                if ((mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                    return R.anim.dock_fade_enter;
+                } else {
+                    return  isKeyguard ? -1 : R.anim.dock_top_enter;
+                }
             }
         } else if (win == mNavigationBar) {
             if (win.getAttrs().windowAnimations != 0) {
@@ -3265,6 +3360,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
             return -1;
         } else if (keyCode == KeyEvent.KEYCODE_MENU) {
+            if (isSidebarCovering()) {
+                // pass it to sidebar !
+                return 0;
+            }
             // Hijack modified menu keys for debugging features
             final int chordBug = KeyEvent.META_SHIFT_ON;
             if (virtualKey || keyguardOn) {
@@ -4576,6 +4675,33 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             cf.right = vf.right = mStableRight;
             cf.left = vf.left = mStableLeft;
             cf.top = vf.top = mStableTop;
+        } else if(attrs.type == TYPE_SIDEBAR_TOOLS) {
+            pf.left = df.left = of.left = mUnrestrictedScreenLeft;
+            pf.top = df.top = of.top = mUnrestrictedScreenTop;
+            pf.right = df.right = of.right = mUnrestrictedScreenWidth + mUnrestrictedScreenLeft;
+            pf.bottom = df.bottom = of.bottom = mUnrestrictedScreenHeight + mUnrestrictedScreenTop;
+            cf.left = vf.left = mRestrictedScreenLeft;
+            cf.top = vf.top = mRestrictedScreenTop;
+            cf.right = vf.right = mRestrictedScreenLeft + mRestrictedScreenWidth;
+            cf.bottom = vf.bottom = mRestrictedScreenTop + mRestrictedScreenHeight;
+            dcf.left = mSystemLeft;
+            dcf.top = 0;
+            dcf.right = mSystemRight;
+            dcf.bottom = mSystemBottom;
+            if(win.isSidebarSideView()) {
+                int gravity = attrs.gravity;
+                int sidebarWidth = win.getHintWidth();
+                if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR))
+                        == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
+                    if (gravity == (Gravity.LEFT | Gravity.FILL_VERTICAL)) {
+                        dcf.left = mSystemLeft;
+                        dcf.right = mSystemLeft + sidebarWidth;
+                    } else if (gravity == (Gravity.RIGHT | Gravity.FILL_VERTICAL)) {
+                        dcf.left = cf.right - sidebarWidth;
+                    }
+                }
+            }
+
         } else if (win == mStatusBar) {
             pf.left = df.left = of.left = mUnrestrictedScreenLeft;
             pf.top = df.top = of.top = mUnrestrictedScreenTop;
@@ -6263,6 +6389,25 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    BroadcastReceiver resetThumbReceiver = new BroadcastReceiver() {
+        public void onReceive(Context context, Intent intent) {
+            if (RESET_THUMB.equals(intent.getAction())) {
+                if(( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) && !isKeyguardLocked() && mCurrentRotation == 0){
+                    mHandler.removeCallbacks(postResetRun);
+                    mHandler.postDelayed(postResetRun, DELAY_PENDING_DO_THUMB_ANIM);
+                }
+            }
+        }
+    };
+
+    Runnable postResetRun = new Runnable(){
+
+        @Override
+        public void run() {
+            mThumbModeFuncs.requestTraversalToThumbMode(ThumbModeFuncs.ACTION_RESET);
+        }
+    };
+
     void launchVoiceAssistWithWakeLock(boolean keyguardActive) {
         IDeviceIdleController dic = IDeviceIdleController.Stub.asInterface(
                 ServiceManager.getService(Context.DEVICE_IDLE_CONTROLLER));
@@ -7048,6 +7193,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         startedWakingUp();
         screenTurningOn(null);
         screenTurnedOn();
+        mSystemGesturesThumb.setSystemBooted();
     }
 
     BootDexoptDialog mBootMsgDialog = null;
@@ -7781,6 +7927,48 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         return true;
     }
 
+    public void dispatchThumbState(int thumbState){
+        mThumbState = thumbState;
+        if(mSystemGesturesThumb != null){
+            mSystemGesturesThumb.setThumbState(mThumbState);
+        }
+        if(mSystemGestures != null){
+            mSystemGestures.setInSidebarMode((mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0);
+        }
+    }
+
+    public void dispatchThumbInterSize(float size){
+        mThumbInterSize = size;
+        if(mSystemGesturesThumb != null){
+            mSystemGesturesThumb.setThumbInterSize(size);
+        }
+    }
+
+    public void updateThumbGestureDetectListener(boolean enable){
+        mShouldRegThumbGestureListener = enable;
+        if(mWindowManagerFuncs != null){
+            try{
+                if(enable){
+                    mWindowManagerFuncs.registerPointerEventListener(mSystemGesturesThumb);
+                }else{
+                    mWindowManagerFuncs.unregisterPointerEventListener(mSystemGesturesThumb);
+                }
+            }catch(IllegalStateException e){
+            }
+        }
+    }
+
+    private void expandNotiPanel(){
+        IStatusBarService service = getStatusBarService();
+        if (service != null) {
+            try {
+                service.expandNotificationsPanel();
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
     @Override
     public void dump(String prefix, PrintWriter pw, String[] args) {
         pw.print(prefix); pw.print("mSafeMode="); pw.print(mSafeMode);
@@ -7979,6 +8167,14 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    private boolean isSidebarCovering() {
+        if (mFocusedWindow != null
+                && mFocusedWindow.getAttrs().type == WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS) {
+            return true;
+        }
+        return false;
+    }
+
     @Override
     public void setLiveLockscreenEdgeDetector(boolean enable) {
         mShowKeyguardOnLeftSwipe = enable;
diff --git a/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java b/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java
index 5e694a5..1607b0c 100644
--- a/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java
+++ b/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java
@@ -197,8 +197,15 @@ public class SystemGesturesPointerEventListener implements PointerEventListener
         final long elapsed = time - mDownTime[i];
         if (DEBUG) Slog.d(TAG, "pointer " + mDownPointerId[i]
                 + " moved (" + fromX + "->" + x + "," + fromY + "->" + y + ") in " + elapsed);
-        if (fromY <= mSwipeStartThreshold
-                && y > fromY + mSwipeDistanceThreshold
+        int topFromDy = mSwipeStartThreshold;
+        int topDy = 0;
+        if (mInSidebarMode) {
+            topFromDy += mThumbOffsetScaleVertiS;
+            topDy = mThumbOffsetScaleVertiS;
+        }
+        if (fromY <= topFromDy
+                && y > topDy
+                && y - fromY > mSwipeDistanceThreshold
                 && elapsed < SWIPE_TIMEOUT_MS) {
             return SWIPE_FROM_TOP;
         }
@@ -259,4 +266,14 @@ public class SystemGesturesPointerEventListener implements PointerEventListener
         void onSwipeFromLeft();
         void onDebug();
     }
+
+    private boolean mInSidebarMode;
+    private int mThumbOffsetScaleVertiS;
+    public void setThumbOffset(int scaleModeVertOffsetS){
+        mThumbOffsetScaleVertiS = scaleModeVertOffsetS;
+    }
+
+    public void setInSidebarMode(boolean inSidebarMode) {
+        mInSidebarMode = inSidebarMode;
+    }
 }
diff --git a/services/core/java/com/android/server/policy/SystemGesturesPointerEventListenerThumb.java b/services/core/java/com/android/server/policy/SystemGesturesPointerEventListenerThumb.java
new file mode 100644
index 0000000..3fb859f
--- /dev/null
+++ b/services/core/java/com/android/server/policy/SystemGesturesPointerEventListenerThumb.java
@@ -0,0 +1,264 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.policy;
+
+import android.content.Context;
+import android.util.Slog;
+import android.view.MotionEvent;
+import android.view.ViewRootImpl;
+import android.view.WindowManagerPolicy.PointerEventListener;
+
+/*
+ * Listens for system-wide input gestures, firing callbacks when detected.
+ * @hide
+ */
+public class SystemGesturesPointerEventListenerThumb implements PointerEventListener {
+    private static final String TAG = "SystemGesturesOneHanded";
+    private static final boolean DEBUG = false;
+    private static final long SWIPE_TIMEOUT_MS_SIDEBAR = 500;
+
+    private static final int SWIPE_NONE = 0;
+    private static final int SWIPE_FROM_BOTTOM = 2;
+    private static final int SWIPE_FROM_TOP_RIGHT_SIDEBAR = 3;
+    private static final int SWIPE_FROM_TOP_LEFT_SIDEBAR = 4;
+    private static final int SWIPE_FROM_TOP_STATUS_BAR = 5;
+    private static final int PULL_STATUS_BAR_OFFSET = 50;
+
+    private final Callbacks mCallbacks;
+    private float mDownX;
+    private float mDownY;
+    private long mDownTime;
+
+    private boolean mSwipeFireable;
+
+    private boolean mSystemBooted;
+    private int mThumbState;
+    private float mInterceptSize;
+    private int mThumbOffsetScaleHoriS = 0;
+    private int mThumbOffsetScaleVertiS = 0;
+    private int mScreenWidth = 0;
+    private int mScreenHeight = 0;
+    private Context mContext;
+
+    private static final int GESTURE_INT_NEED_BIG_SIZE = 0;
+    private static final int GESTURE_INT_TO_L_CORNER = 1;
+    private static final int GESTURE_INT_TO_R_CORNER = 2;
+    private static final int GESTURE_INT_TO_EXP_STATUSBAR = 3;
+    private static final int GESTURE_INT_TO_RST_FROM_L_CORNER = 4;
+    private static final int GESTURE_INT_TO_RST_FROM_R_CORNER = 5;
+
+    private int mGestureIntent = GESTURE_INT_NEED_BIG_SIZE;
+    private static int DETECT_GEST_L = 80;
+    private static int DETECT_GEST_W = 70;
+    private static int DETECT_GEST_W_H = 50;
+    private static int FORCE_NOT_TOUCH_WIDTH = 160;
+    private static final int SWIPE_TO_SIDEBAR_MODE_OFFSET = 80 * 80 * 2;
+
+    private int getGestureIntent(float downX, float downY){
+        if((mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0){
+            if((downX <= DETECT_GEST_L && downY <= DETECT_GEST_W) || (downX <= DETECT_GEST_W_H && downY <= DETECT_GEST_L+DETECT_GEST_W)){
+                return GESTURE_INT_TO_R_CORNER;
+            }else if((downX >= mScreenWidth - DETECT_GEST_L && downY <= DETECT_GEST_W)
+                    || (downX >= mScreenWidth - DETECT_GEST_W_H && downY <= DETECT_GEST_L+DETECT_GEST_W)){
+                return GESTURE_INT_TO_L_CORNER;
+            }
+        }else if((mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+            if(downX < mScreenWidth - mThumbOffsetScaleHoriS){
+                if(downY < mThumbOffsetScaleVertiS){
+                    return GESTURE_INT_TO_EXP_STATUSBAR;
+                }else {
+                    return GESTURE_INT_TO_RST_FROM_L_CORNER;
+                }
+            }
+        }else if( (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0 ){
+            if(downX > mThumbOffsetScaleHoriS){
+                if(downY < mThumbOffsetScaleVertiS){
+                    return GESTURE_INT_TO_EXP_STATUSBAR;
+                }else {
+                    return GESTURE_INT_TO_RST_FROM_R_CORNER;
+                }
+            }
+        }
+        return GESTURE_INT_NEED_BIG_SIZE;
+    }
+
+    public SystemGesturesPointerEventListenerThumb(Context context, Callbacks callbacks) {
+        mContext = context;
+        mCallbacks = checkNull("callbacks", callbacks);
+    }
+
+    private static <T> T checkNull(String name, T arg) {
+        if (arg == null) {
+            throw new IllegalArgumentException(name + " must not be null");
+        }
+        return arg;
+    }
+
+    @Override
+    public void onPointerEvent(MotionEvent event) {
+        if(!mSystemBooted) return;
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN:
+                mSwipeFireable = true;
+                captureDown(event);
+                break;
+            case MotionEvent.ACTION_MOVE:
+                if (mSwipeFireable) {
+                    final int swipe = (event.getPointerCount() > 1) ? SWIPE_NONE : detectSwipe(event);
+                    mSwipeFireable = swipe == SWIPE_NONE;
+                    if (swipe == SWIPE_FROM_BOTTOM &&  (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                        if (DEBUG) Slog.d(TAG, "Firing onSwipeFromBottom");
+                        mCallbacks.onSwipeFromBottom();
+                    }else if (swipe == SWIPE_FROM_TOP_STATUS_BAR 
+                            && (mThumbState & ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR) != 0
+                            && (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                        if (DEBUG) Slog.d(TAG, "Firing onSwipeFromTopStatusBar");
+                        mCallbacks.onSwipeFromTopStatusBar();
+                    } else if (swipe == SWIPE_FROM_TOP_LEFT_SIDEBAR
+                            && (mThumbState & ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR) != 0
+                            && (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0) {
+                        if (DEBUG) Slog.d(TAG, "Firing onSwipeFromTopLeft");
+                        mCallbacks.onSwipeFromTopLeftSidebar();
+                    } else if (swipe == SWIPE_FROM_TOP_RIGHT_SIDEBAR
+                            && (mThumbState & ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR) != 0
+                            && (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0) {
+                        if (DEBUG) Slog.d(TAG, "Firing onSwipeFromTopRight");
+                        mCallbacks.onSwipeFromTopRightSidebar();
+                    }
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL:
+                mSwipeFireable = false;
+                mGestureIntent = GESTURE_INT_NEED_BIG_SIZE;
+                break;
+            default:
+                if (DEBUG) Slog.d(TAG, "Ignoring " + event);
+        }
+    }
+
+    private void captureDown(MotionEvent event) {
+        mDownX = event.getX();
+        mDownY = event.getY();
+        mDownTime = event.getEventTime();
+        mGestureIntent = getGestureIntent(mDownX, mDownY);
+        if (DEBUG) Slog.d(TAG, "pointer " +
+                " down x=" + mDownX + " y=" + mDownY + " Gesture intent " + mGestureIntent);
+    }
+
+    private int detectSwipe(MotionEvent move) {
+        boolean sizebBig = move.getSize() > mInterceptSize;
+        if(sizebBig == false && mGestureIntent == GESTURE_INT_NEED_BIG_SIZE){
+            return SWIPE_NONE;
+        }
+        final int historySize = move.getHistorySize();
+        for (int h = 0; h < historySize; h++) {
+            final long time = move.getHistoricalEventTime(h);
+            final float x = move.getHistoricalX(h);
+            final float y = move.getHistoricalY(h);
+            final int swipe = detectSwipe(sizebBig, time, x, y);
+            if (swipe != SWIPE_NONE) {
+                return swipe;
+            }
+        }
+        final int swipe = detectSwipe(sizebBig, move.getEventTime(), move.getX(), move.getY());
+        return swipe;
+    }
+
+    private int detectSwipe(boolean big, long time, float x, float y) {
+        final float fromX = mDownX;
+        final float fromY = mDownY;
+        final long elapsed = time - mDownTime;
+        if (DEBUG) Slog.d(TAG, "pointer "
+                + " moved (" + fromX + "->" + x + "," + fromY + "->" + y + ") in " + elapsed);
+        {
+            if(elapsed < SWIPE_TIMEOUT_MS_SIDEBAR){
+                if(mGestureIntent == GESTURE_INT_TO_EXP_STATUSBAR){
+                    if((mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0
+                            || (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+                        if (fromY < mThumbOffsetScaleVertiS
+                                && y > (mThumbOffsetScaleVertiS + PULL_STATUS_BAR_OFFSET)){
+                            if (DEBUG) Slog.d(TAG, "SWIPE_FROM_TOP_STATUS_BAR");
+                            return SWIPE_FROM_TOP_STATUS_BAR;
+                        }
+                    }
+                }
+                if(((y-fromY)*(y-fromY) + (x-fromX)*(x-fromX)) > SWIPE_TO_SIDEBAR_MODE_OFFSET){
+                    if(mGestureIntent == GESTURE_INT_TO_L_CORNER){
+                        if(fromX - x  > FORCE_NOT_TOUCH_WIDTH
+                                && y - fromY > FORCE_NOT_TOUCH_WIDTH){
+                            if (DEBUG) Slog.d(TAG, "SWIPE_FROM_TOP_LEFT_SIDEBAR");
+                            return SWIPE_FROM_TOP_LEFT_SIDEBAR;
+                        }
+                    }else if(mGestureIntent == GESTURE_INT_TO_R_CORNER){
+                        if(x - fromX > FORCE_NOT_TOUCH_WIDTH
+                                && y - fromY > FORCE_NOT_TOUCH_WIDTH){
+                            if (DEBUG) Slog.d(TAG, "SWIPE_FROM_TOP_RIGHT_SIDEBAR");
+                            return SWIPE_FROM_TOP_RIGHT_SIDEBAR;
+                        }
+                    }else if(mGestureIntent == GESTURE_INT_TO_RST_FROM_L_CORNER){
+                        if(x >  mScreenWidth - mThumbOffsetScaleHoriS && y < mThumbOffsetScaleVertiS
+                                && x - fromX  > FORCE_NOT_TOUCH_WIDTH
+                                && fromY - y  > FORCE_NOT_TOUCH_WIDTH
+                                && (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+                            if (DEBUG) Slog.d(TAG, "SWIPE_FROM_BOTTOM");
+                            return SWIPE_FROM_BOTTOM;
+                        }
+                    }else if(mGestureIntent == GESTURE_INT_TO_RST_FROM_R_CORNER){
+                        if(x < mThumbOffsetScaleHoriS && y < mThumbOffsetScaleVertiS
+                                && fromX - x  > FORCE_NOT_TOUCH_WIDTH
+                                && fromY - y  > FORCE_NOT_TOUCH_WIDTH
+                                && (mThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+                            if (DEBUG) Slog.d(TAG, "SWIPE_FROM_BOTTOM");
+                            return SWIPE_FROM_BOTTOM;
+                        }
+                    }
+                }
+            }
+        }
+
+        if (DEBUG) Slog.d(TAG, "SWIPE_NONE");
+        return SWIPE_NONE;
+    }
+
+    public void setThumbOffset(int scaleModeVertOffsetS, int scaleModeHoriOffsetS,
+            int screenWidth, int screenHeight){
+        mThumbOffsetScaleVertiS = scaleModeVertOffsetS;
+        mThumbOffsetScaleHoriS = scaleModeHoriOffsetS;
+        mScreenWidth = screenWidth;
+        mScreenHeight = screenHeight;
+    }
+
+    interface Callbacks {
+        void onSwipeFromBottom();
+        void onSwipeFromTopLeftSidebar();
+        void onSwipeFromTopRightSidebar();
+        void onSwipeFromTopStatusBar();
+    }
+    public void setSystemBooted() {
+        mSystemBooted = true;
+    }
+
+    public void setThumbState(int state) {
+        mThumbState = state;
+    }
+
+    public void setThumbInterSize(float size){
+        mInterceptSize = size;
+    }
+
+}
diff --git a/services/core/java/com/android/server/wm/AppTransition.java b/services/core/java/com/android/server/wm/AppTransition.java
index 7bd0635..565dc96 100644
--- a/services/core/java/com/android/server/wm/AppTransition.java
+++ b/services/core/java/com/android/server/wm/AppTransition.java
@@ -238,6 +238,10 @@ public class AppTransition implements Dump {
         return mNextAppTransition == TRANSIT_NONE;
     }
 
+    boolean isAppTransitionTypeNone() {
+        return mNextAppTransitionType == NEXT_TRANSIT_TYPE_NONE;
+    }
+
     boolean isTransitionEqual(int transit) {
         return mNextAppTransition == transit;
     }
diff --git a/services/core/java/com/android/server/wm/DragState.java b/services/core/java/com/android/server/wm/DragState.java
index 1a125d4..eb054f2 100644
--- a/services/core/java/com/android/server/wm/DragState.java
+++ b/services/core/java/com/android/server/wm/DragState.java
@@ -16,13 +16,17 @@
 
 package com.android.server.wm;
 
+import com.android.server.UiThread;
 import com.android.server.input.InputApplicationHandle;
 import com.android.server.input.InputWindowHandle;
 import com.android.server.wm.WindowManagerService.DragInputEventReceiver;
 import com.android.server.wm.WindowManagerService.H;
 
+import android.animation.Animator;
+import android.animation.ValueAnimator;
 import android.content.ClipData;
 import android.content.ClipDescription;
+import android.graphics.Matrix;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.Region;
@@ -36,7 +40,10 @@ import android.view.DragEvent;
 import android.view.InputChannel;
 import android.view.SurfaceControl;
 import android.view.View;
+import android.view.ViewRootImpl;
 import android.view.WindowManager;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.OvershootInterpolator;
 
 import java.util.ArrayList;
 
@@ -62,18 +69,48 @@ class DragState {
     ArrayList<WindowState> mNotifiedWindows;
     boolean mDragInProgress;
     Display mDisplay;
-
     private final Region mTmpRegion = new Region();
+
+    float mDelX, mDelY;
+    int mShowAnimDelay;
+
     private final Rect mTmpRect = new Rect();
 
     DragState(WindowManagerService service, IBinder token, SurfaceControl surface,
-            int flags, IBinder localWin) {
+            int w, int h, int flags, IBinder localWin, float delX, float delY, int showAnimDelay) {
         mService = service;
         mToken = token;
         mSurfaceControl = surface;
         mFlags = flags;
         mLocalWin = localWin;
         mNotifiedWindows = new ArrayList<WindowState>();
+        mDelX = delX;
+        mDelY = delY;
+        mShowAnimDelay = showAnimDelay;
+        mWidth = w;
+        mHeight = h;
+    }
+
+    void dismissAndReset(){
+        UiThread.getHandler().removeCallbacks(mOnDragAnimRun);
+        UiThread.getHandler().removeCallbacks(mOnDismissAnimRun);
+        UiThread.getHandler().removeCallbacks(mOnDismissAnimAlphaRun);
+        if(!UiThread.getHandler().hasCallbacks(mOnDragAnimRun)) {
+            if (mDragResult) {
+                UiThread.getHandler().post(mOnDismissAnimRun);
+            } else {
+                UiThread.getHandler().post(mOnDismissAnimAlphaRun);
+            }
+        }
+        mService.mH.removeMessages(H.DRAG_STATE_RESET);
+        Message msg = mService.mH.obtainMessage(H.DRAG_STATE_RESET);
+        mService.mH.sendMessageDelayed(msg, 300);
+    }
+
+    void removeAnimRun(){
+        UiThread.getHandler().removeCallbacks(mOnDragAnimRun);
+        UiThread.getHandler().removeCallbacks(mOnDismissAnimRun);
+        UiThread.getHandler().removeCallbacks(mOnDismissAnimAlphaRun);
     }
 
     void reset() {
@@ -86,6 +123,9 @@ class DragState {
         mToken = null;
         mData = null;
         mThumbOffsetX = mThumbOffsetY = 0;
+        mWidth = mHeight = 0;
+        mTouchX = mTouchY = 0;
+        mOffsetMtrX = mOffsetMtrY = 0;
         mNotifiedWindows = null;
     }
 
@@ -128,6 +168,7 @@ class DragState {
             mDragWindowHandle.ownerUid = Process.myUid();
             mDragWindowHandle.inputFeatures = 0;
             mDragWindowHandle.scaleFactor = 1.0f;
+            mDragWindowHandle.inThumbMode = false;
 
             // The drag window cannot receive new touches.
             mDragWindowHandle.touchableRegion.setEmpty();
@@ -180,7 +221,9 @@ class DragState {
 
     /* call out to each visible window/session informing it about the drag
      */
-    void broadcastDragStartedLw(final float touchX, final float touchY) {
+    void broadcastDragStartedLw(float touchX, float touchY) {
+        touchX += mDelX;
+        touchY += mDelY;
         // Cache a base-class instance of the clip metadata so that parceling
         // works correctly in calling out to the apps.
         mDataDescription = (mData != null) ? mData.getDescription() : null;
@@ -210,6 +253,8 @@ class DragState {
      */
     private void sendDragStartedLw(WindowState newWin, float touchX, float touchY,
             ClipDescription desc) {
+        touchX += mDelX;
+        touchY += mDelY;
         // Don't actually send the event if the drag is supposed to be pinned
         // to the originating window but 'newWin' is not that window.
         if ((mFlags & View.DRAG_FLAG_GLOBAL) == 0) {
@@ -267,7 +312,11 @@ class DragState {
                 0, 0, null, null, null, mDragResult);
         for (WindowState ws: mNotifiedWindows) {
             try {
-                ws.mClient.dispatchDragEvent(evt);
+                if (Process.myPid() == ws.mSession.mPid) {
+                    ws.mClient.dispatchDragEvent(DragEvent.obtain(evt));
+                } else {
+                    ws.mClient.dispatchDragEvent(evt);
+                }
             } catch (RemoteException e) {
                 Slog.w(WindowManagerService.TAG, "Unable to drag-end window " + ws);
             }
@@ -285,8 +334,15 @@ class DragState {
         mService.mInputMonitor.updateInputWindowsLw(true /*force*/);
 
         // free our resources and drop all the object references
-        mService.mDragState.reset();
-        mService.mDragState = null;
+        mService.mDragState.dismissAndReset();
+    }
+
+    void handleReset(){
+        if(mService.mDragState != null){
+            mService.mDragState.removeAnimRun();
+            mService.mDragState.reset();
+            mService.mDragState = null;
+        }
     }
 
     void notifyMoveLw(float x, float y) {
@@ -297,16 +353,16 @@ class DragState {
                 WindowManagerService.TAG, ">>> OPEN TRANSACTION notifyMoveLw");
         SurfaceControl.openTransaction();
         try {
-            mSurfaceControl.setPosition(x - mThumbOffsetX, y - mThumbOffsetY);
-            if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(WindowManagerService.TAG, "  DRAG "
-                    + mSurfaceControl + ": pos=(" +
-                    (int)(x - mThumbOffsetX) + "," + (int)(y - mThumbOffsetY) + ")");
+            setPosition(x, y);
         } finally {
             SurfaceControl.closeTransaction();
             if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS) Slog.i(
                     WindowManagerService.TAG, "<<< CLOSE TRANSACTION notifyMoveLw");
         }
 
+        x += mDelX;
+        y += mDelY;
+
         // Tell the affected window
         WindowState touchedWin = getTouchedWinAtPointLw(x, y);
         if (touchedWin == null) {
@@ -356,6 +412,20 @@ class DragState {
     // dispatch the global drag-ended message, 'false' if we need to wait for a
     // result from the recipient.
     boolean notifyDropLw(float x, float y) {
+        if (inWindowBorder(x, y)) {
+            Slog.w(WindowManagerService.TAG,
+                    "touch point is ("
+                            + x
+                            + ","
+                            + y
+                            + "), "
+                            + "too border! ignore it, immediately dispatch the global drag-ended message");
+            return true;
+        }
+
+        setPosition(x, y);
+        x += mDelX;
+        y += mDelY;
         WindowState touchedWin = getTouchedWinAtPointLw(x, y);
         if (touchedWin == null) {
             // "drop" outside a valid window -- no recipient to apply a
@@ -369,6 +439,7 @@ class DragState {
         }
         final int myPid = Process.myPid();
         final IBinder token = touchedWin.mClient.asBinder();
+
         DragEvent evt = obtainDragEvent(touchedWin, DragEvent.ACTION_DROP, x, y,
                 null, null, mData, false);
         try {
@@ -434,15 +505,263 @@ class DragState {
         return touchedWin;
     }
 
-    private static DragEvent obtainDragEvent(WindowState win, int action,
+    private DragEvent obtainDragEvent(WindowState win, int action,
             float x, float y, Object localState,
             ClipDescription description, ClipData data, boolean result) {
-        float winX = x - win.mFrame.left;
-        float winY = y - win.mFrame.top;
-        if (win.mEnforceSizeCompat) {
-            winX *= win.mGlobalScale;
-            winY *= win.mGlobalScale;
+        float winX = x;
+        float winY = y;
+        if(win.isWinInThumbMode()){
+            if((ThumbModeHelper.getInstance().getThumbStates() & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+                winX = winX / mService.mScaleThumbScaleS;
+                winX = winX - win.mLeftBase;
+                winY = winY - mService.mScaleThumbYOffsetS;
+                winY = winY / mService.mScaleThumbScaleS;
+                winY = winY - win.mTopBase;
+            }else if((ThumbModeHelper.getInstance().getThumbStates() & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0){
+                winX = (winX - mService.mScaleThumbXOffsetS) / mService.mScaleThumbScaleS;
+                winX = winX - win.mLeftBase;;
+                winY = winY - mService.mScaleThumbYOffsetS;
+                winY = winY / mService.mScaleThumbScaleS;
+                winY = winY - win.mTopBase;
+            }
+        }else{
+            winX = winX - win.mLeftBase;
+            winY = winY - win.mTopBase;
+            if (win.mEnforceSizeCompat) {
+                winX *= win.mGlobalScale;
+                winY *= win.mGlobalScale;
+            }
         }
         return DragEvent.obtain(action, winX, winY, localState, description, data, result);
     }
+
+    int mWidth, mHeight;
+    private float mTouchX, mTouchY;
+    float mOffsetMtrX, mOffsetMtrY;
+    public static float MAX_SCALE = 1.4f;
+    public static float MIN_SCALE = 0.3f;
+    public static float SCALE_AX_PER = 0.5f;
+    public static float SCALE_AY_PER = 0.5f;
+
+    public void setPosition(float touchX, float touchY) {
+        if(mSurfaceControl != null){
+            mTouchX = touchX;
+            mTouchY = touchY;
+            mSurfaceControl.setPosition(mTouchX - mThumbOffsetX + mOffsetMtrX, mTouchY - mThumbOffsetY + mOffsetMtrY);
+            if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(WindowManagerService.TAG, "  DRAG "
+                    + mSurfaceControl + ": pos=(" +
+                    (int)(mTouchX - mThumbOffsetX + mOffsetMtrX) + ","
+                            + (int)(mTouchY - mThumbOffsetY + mOffsetMtrY) + ")");
+        }
+    }
+
+    public void setMatrix(float dsdx, float dtdx, float dsdy, float dtdy) {
+        if(mSurfaceControl != null){
+            mSurfaceControl.setMatrix(dsdx, dtdx, dsdy, dtdy);
+        }
+    }
+
+    public void scaleSurface(float xScale, float yScale, float aXPer, float aYPer) {
+        scaleSurface(xScale, yScale, aXPer, aYPer, false);
+    }
+
+    public void scaleSurface(float xScale, float yScale, float aXPer, float aYPer, boolean skew) {
+        final float[] mTmpFloats = new float[9];
+        Matrix matrix = new Matrix();
+        if(skew){
+            matrix.postRotate(45.f);
+            matrix.postSkew(1 - xScale, 1 - yScale, aXPer*mWidth, aYPer*mHeight);
+            matrix.postRotate(-45.f);
+            matrix.postScale(xScale * 0.7f, yScale, aXPer*mWidth, aYPer*mHeight*(1+yScale));
+        }else {
+            matrix.postScale(xScale, yScale, aXPer*mWidth, aYPer*mHeight);
+        }
+        matrix.getValues(mTmpFloats);
+        mOffsetMtrX = mTmpFloats[Matrix.MTRANS_X];
+        mOffsetMtrY = mTmpFloats[Matrix.MTRANS_Y];
+        setPosition(mTouchX, mTouchY);
+        setMatrix(mTmpFloats[Matrix.MSCALE_X], mTmpFloats[Matrix.MSKEW_Y],
+                    mTmpFloats[Matrix.MSKEW_X], mTmpFloats[Matrix.MSCALE_Y]);
+    }
+
+    public void startOnDragAnim() {
+        UiThread.getHandler().removeCallbacks(mOnDragAnimRun);
+        UiThread.getHandler().postDelayed(mOnDragAnimRun, mShowAnimDelay);
+    }
+
+    private Runnable mOnDismissAnimAlphaRun = new Runnable() {
+        @Override
+        public void run() {
+            final ValueAnimator animator = ValueAnimator.ofFloat(1, 0);
+            final ValueAnimator.AnimatorListener animEventListener = new ValueAnimator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {}
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {}
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                    handleReset();
+                }
+                @Override
+                public void onAnimationCancel(Animator animation){
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                    handleReset();
+                }
+            };
+            final ValueAnimator.AnimatorUpdateListener updateListener = new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    float currentAnimVal = (Float) animation.getAnimatedValue();
+                    SurfaceControl.openTransaction();
+                    try {
+                        if(mSurfaceControl != null){
+                            mSurfaceControl.setAlpha(currentAnimVal);
+                        }
+                    } finally {
+                        SurfaceControl.closeTransaction();
+                    }
+                }
+            };
+            animator.setDuration(200);
+            animator.setInterpolator(new DecelerateInterpolator());
+            animator.addUpdateListener(updateListener);
+            animator.addListener(animEventListener);
+            animator.start();
+        }
+    };
+
+    private Runnable mOnDismissAnimRun = new Runnable() {
+        @Override
+        public void run() {
+            final ValueAnimator animator = ValueAnimator.ofFloat(1, 0);
+            final ValueAnimator.AnimatorListener animEventListener = new ValueAnimator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {}
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {}
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                    handleReset();
+                }
+                @Override
+                public void onAnimationCancel(Animator animation){
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                    handleReset();
+                }
+            };
+            final ValueAnimator.AnimatorUpdateListener updateListener = new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    float currentAnimVal = (Float) animation.getAnimatedValue();
+                    float alpha = (currentAnimVal*(1-MIN_SCALE)) + MIN_SCALE;
+                    float scaleX = currentAnimVal;
+                    float scaleY = currentAnimVal;
+                    float scaleApX = (mThumbOffsetX + mDelX) / mWidth;
+                    float scaleApY = (mThumbOffsetY + mDelY) / mHeight;
+                    SurfaceControl.openTransaction();
+                    try {
+                        scaleSurface(scaleX, scaleY, scaleApX, scaleApY, true);
+                        if(mSurfaceControl != null){
+                            mSurfaceControl.setAlpha(alpha);
+                        }
+                    } finally {
+                        SurfaceControl.closeTransaction();
+                    }
+                }
+            };
+            animator.setDuration(200);
+            animator.setInterpolator(new DecelerateInterpolator());
+            animator.addUpdateListener(updateListener);
+            animator.addListener(animEventListener);
+            animator.start();
+        }
+    };
+
+    private Runnable mOnDragAnimRun = new Runnable() {
+        @Override
+        public void run() {
+            final ValueAnimator animator = ValueAnimator.ofFloat(MAX_SCALE, 1);
+            final ValueAnimator.AnimatorListener animEventListener = new ValueAnimator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {}
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {}
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                }
+                @Override
+                public void onAnimationCancel(Animator animation){
+                    if(animator != null){
+                        animator.removeAllUpdateListeners();
+                        animator.removeAllListeners();
+                    }
+                }
+            };
+            final ValueAnimator.AnimatorUpdateListener updateListener = new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    float currentAnimVal = (Float) animation.getAnimatedValue();
+                    float scaleX = currentAnimVal; // ((currentAnimVal - 1) * 0.7f) + 1;
+                    float scaleY = currentAnimVal;
+                    SurfaceControl.openTransaction();
+                    try {
+                        scaleSurface(scaleX, scaleY, SCALE_AX_PER, SCALE_AY_PER);
+                    } finally {
+                        SurfaceControl.closeTransaction();
+                    }
+                }
+            };
+            SurfaceControl.openTransaction();
+            try {
+                if (mSurfaceControl != null) {
+                    mSurfaceControl.show();
+                }
+            } finally {
+                SurfaceControl.closeTransaction();
+            }
+            animator.setDuration(200);
+            animator.setInterpolator(new OvershootInterpolator());
+            animator.addUpdateListener(updateListener);
+            animator.addListener(animEventListener);
+            animator.start();
+        }
+    };
+
+    private boolean inWindowBorder(float x, float y) {
+        Point pt = new Point();
+        mService.getDefaultDisplayContentLocked().getDisplay().getSize(pt);
+        int width = pt.x;
+        int height = pt.y;
+        float delWidth = width / 100.0f;
+        float delHeight = height / 100.0f;
+        if (x < delWidth || x > width - delWidth || y < delHeight
+                || y > height - delHeight) {
+            return true;
+        }
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/services/core/java/com/android/server/wm/InputConsumerImpl.java b/services/core/java/com/android/server/wm/InputConsumerImpl.java
index 0581a16..cba59ef 100644
--- a/services/core/java/com/android/server/wm/InputConsumerImpl.java
+++ b/services/core/java/com/android/server/wm/InputConsumerImpl.java
@@ -71,6 +71,7 @@ public final class InputConsumerImpl implements WindowManagerPolicy.InputConsume
         mWindowHandle.ownerUid = Process.myUid();
         mWindowHandle.inputFeatures = 0;
         mWindowHandle.scaleFactor = 1.0f;
+        mWindowHandle.inThumbMode = false;
     }
 
     void layout(int dw, int dh) {
diff --git a/services/core/java/com/android/server/wm/InputMonitor.java b/services/core/java/com/android/server/wm/InputMonitor.java
index ae442e5..04fa333 100644
--- a/services/core/java/com/android/server/wm/InputMonitor.java
+++ b/services/core/java/com/android/server/wm/InputMonitor.java
@@ -169,7 +169,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
 
     private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,
             final WindowState child, int flags, final int type, final boolean isVisible,
-            final boolean hasFocus, final boolean hasWallpaper) {
+            final boolean hasFocus, final boolean hasWallpaper, final boolean inThumbMode) {
         // Add a window to our list of input windows.
         inputWindowHandle.name = child.toString();
         final boolean modal = (flags & (WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
@@ -210,7 +210,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
         } else {
             inputWindowHandle.scaleFactor = 1;
         }
-
+        inputWindowHandle.inThumbMode = inThumbMode;
 
         addInputWindowHandleLw(inputWindowHandle);
     }
@@ -292,14 +292,15 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
                         && !disableWallpaperTouchEvents;
                 final boolean onDefaultDisplay = (child.getDisplayId() == Display.DEFAULT_DISPLAY);
 
+                final boolean inThumbMode = child.isWinInThumbMode();
                 // If there's a drag in progress and 'child' is a potential drop target,
                 // make sure it's been told about the drag
-                if (inDrag && isVisible && onDefaultDisplay) {
+                if (mService.mDragState != null && isVisible && onDefaultDisplay) {
                     mService.mDragState.sendDragStartedIfNeededLw(child);
                 }
 
                 addInputWindowHandleLw(inputWindowHandle, child, flags, type, isVisible, hasFocus,
-                        hasWallpaper);
+                        hasWallpaper, inThumbMode);
             }
         }
 
diff --git a/services/core/java/com/android/server/wm/Session.java b/services/core/java/com/android/server/wm/Session.java
index f0793b8..857ff63 100644
--- a/services/core/java/com/android/server/wm/Session.java
+++ b/services/core/java/com/android/server/wm/Session.java
@@ -44,6 +44,7 @@ import android.view.InputChannel;
 import android.view.Surface;
 import android.view.SurfaceControl;
 import android.view.SurfaceSession;
+import android.view.ViewRootImpl;
 import android.view.WindowManager;
 
 import java.io.PrintWriter;
@@ -244,6 +245,10 @@ final class Session extends IWindowSession.Stub
         }
     }
 
+    public void getThumbModeCrop(Rect outCrop) {
+        ThumbModeHelper.getInstance().getCropRect(outCrop);
+    }
+
     public boolean performHapticFeedback(IWindow window, int effectId,
             boolean always) {
         synchronized(mService.mWindowMap) {
@@ -260,9 +265,9 @@ final class Session extends IWindowSession.Stub
 
     /* Drag/drop */
     public IBinder prepareDrag(IWindow window, int flags,
-            int width, int height, Surface outSurface) {
+            int width, int height, Surface outSurface, float delX, float delY, int showAnimDelay) {
         return mService.prepareDragSurface(window, mSurfaceSession, flags,
-                width, height, outSurface);
+                width, height, outSurface, delX, delY, showAnimDelay);
     }
 
     public boolean performDrag(IWindow window, IBinder dragToken,
@@ -317,6 +322,9 @@ final class Session extends IWindowSession.Stub
                 return false;
             }
 
+            touchX = callingWin.mFrame.left + touchX * callingWin.mGlobalScale;
+            touchY = callingWin.mFrame.top + touchY * callingWin.mGlobalScale;
+
             mService.mDragState.mData = data;
             mService.mDragState.mCurrentX = touchX;
             mService.mDragState.mCurrentY = touchY;
@@ -332,17 +340,20 @@ final class Session extends IWindowSession.Stub
                     WindowManagerService.TAG, ">>> OPEN TRANSACTION performDrag");
             SurfaceControl.openTransaction();
             try {
-                surfaceControl.setPosition(touchX - thumbCenterX,
-                        touchY - thumbCenterY);
-                surfaceControl.setAlpha(.7071f);
                 surfaceControl.setLayer(mService.mDragState.getDragLayerLw());
                 surfaceControl.setLayerStack(display.getLayerStack());
-                surfaceControl.show();
+
+                mService.mDragState.setPosition(touchX, touchY);
+                mService.mDragState.scaleSurface(DragState.MAX_SCALE, DragState.MAX_SCALE,
+                        DragState.SCALE_AX_PER, DragState.SCALE_AY_PER);
+
+                //surfaceControl.show();
             } finally {
                 SurfaceControl.closeTransaction();
                 if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS) Slog.i(
                         WindowManagerService.TAG, "<<< CLOSE TRANSACTION performDrag");
             }
+            mService.mDragState.startOnDragAnim();
         }
 
         return true;    // success!
diff --git a/services/core/java/com/android/server/wm/TaskStack.java b/services/core/java/com/android/server/wm/TaskStack.java
index 7e437c7..39e68ba 100644
--- a/services/core/java/com/android/server/wm/TaskStack.java
+++ b/services/core/java/com/android/server/wm/TaskStack.java
@@ -510,7 +510,8 @@ public class TaskStack {
             mAnimationBackgroundAnimator = winAnimator;
             animLayer = mService.adjustAnimationBackground(winAnimator);
             mAnimationBackgroundSurface.show(animLayer - WindowManagerService.LAYER_OFFSET_DIM,
-                    ((color >> 24) & 0xff) / 255f, 0);
+                    ThumbModeHelper.getInstance().isSysInThumbMode() ?
+                            0.0f : (((color >> 24) & 0xff) / 255f), 0);
         }
     }
 
diff --git a/services/core/java/com/android/server/wm/ThumbModeHelper.java b/services/core/java/com/android/server/wm/ThumbModeHelper.java
new file mode 100644
index 0000000..07571e9
--- /dev/null
+++ b/services/core/java/com/android/server/wm/ThumbModeHelper.java
@@ -0,0 +1,1028 @@
+package com.android.server.wm;
+
+import java.io.IOException;
+
+import android.graphics.Color;
+import android.os.PowerManager;
+import android.os.RemoteException;
+import java.io.InputStream;
+import android.content.Intent;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.graphics.Bitmap;
+import android.os.Handler;
+import android.os.ServiceManager;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.view.IWindow;
+import android.view.Surface;
+import android.view.View;
+import android.view.WindowManagerPolicy;
+import android.widget.ImageView;
+import android.widget.Toast;
+import android.view.WindowManager;
+import android.view.Gravity;
+import android.graphics.PixelFormat;
+import android.graphics.drawable.BitmapDrawable;
+import android.view.ViewRootImpl;
+import android.view.animation.Animation;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.OvershootInterpolator;
+import android.view.animation.ScaleAnimation;
+import android.view.animation.TranslateAnimation;
+import android.graphics.BitmapFactory;
+import android.graphics.BitmapShader;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.Shader.TileMode;
+import android.util.DisplayMetrics;
+import android.util.Slog;
+import com.android.server.UiThread;
+import com.android.server.wallpaper.WallpaperManagerService;
+import android.content.BroadcastReceiver;
+import android.content.IntentFilter;
+
+public class ThumbModeHelper implements WindowManagerPolicy.ThumbModeFuncs{
+
+    public static final boolean DEBUG = SystemProperties.getInt("ro.debuggable", 0) == 1;
+    public static final String TAG = "ONE-HANDED";
+    private static ThumbModeHelper sThumbModeHelper;
+    private WindowManagerService mService;
+    private boolean mNeedSetToThumbModeAnim = false;
+    private boolean mNeedSetToNormalModeAnim = false;
+    private boolean mNeedAdjustFrameToThumbMode = false;
+    private boolean mNeedAdjustFrameNormalMode = false;
+    private int mThumbAction = WindowManagerPolicy.ThumbModeFuncs.ACTION_NONE;
+    private boolean mSysDoneToThumbMode = false;
+    private boolean mSysDoneToReturnNormalModeS = true;
+    private boolean mAnimNeed = false;
+    private static boolean mEnableSidebar = false;
+    private float mInterceptTouchEventSize = 100;
+    private static final int INTERVAL_POLLING_DO_THUMB_ANIM = 50;
+    private Context mContext;
+    private WallpaperManagerService mWallpaperManager;
+    private boolean mCurrentRotationHori;
+    private BitmapDrawable mThumbWallpaperBmpDraw;
+    private int mCacheThumbWallBDResId;
+    private int mCachedThumbWallTransMode;
+    private int mThumbWallpaperResId;
+
+    private ImageView mThumbModeWallpaper;
+    public static int WIDTH_SCREEN = 0;
+    public static int HEIGHT_SCREEN = 0;
+    public static int SCALE_HORI_THUMB_OFFSET_S = 0;
+    public static int SCALE_VERT_THUMB_OFFSET_S = 0;
+    public static final int HEIGHT_THUMB_SHADOW = 46;
+    public static int HEIGHT_THUMB_OFFSET = 798;
+    public static int OFFSET_THUMB_WALLPAPER = 112;
+    public static int HEIGHT_THUMB_WALLPAPER_SCALE_MODE = 0;
+    public static final String THUMB_WALLPAPER_WINDOW_TITLE = "com.smartisanos.ThumbWallpaper";
+    public static final String SCREEN_SHOT_WINDOW_TITLE = "com.android.systemui.screenshot.screenshotAnimation";
+    public static final String SHOT_SCREEN_SHOT_WINDOW_TITLE = "com.android.systemui.screenshot.screenshotAnimation_quick";
+    public static final String INCALL_UI_WINDOW_TITLE = "com.android.incallui/com.android.incallui.InCallScreen";
+    public static final String SMARTISAN_POWER_MENU_TITLE = "com.android.internal.policy.impl.SmaritsanPowerMenu";
+    public static final String REMOTE_HELPER_WINDOW_TITLE = "com.smartisanos.handinhand/com.smartisanos.handinhand.activity.ProviderActivity";
+    public static final String REMOTE_HELPER_CLIENT_WINDOW_TITLE = "com.smartisanos.handinhand";
+    public static final String REMOTE_HELPER_CONTROLED_CLIENT_WINDOW_TITLE = "com.smartisanos.handinhand.ControlledFloattingView";
+    public static final String SCROLL_SCREEN_SHOT__WINDOW_TITLE = "scroll_screenshot_edit";
+    public static final String POWER_SAVE_LAUNCHER_TITLE = "com.smartisanos.powersaving.launcher/com.smartisanos.powersaving.launcher.Launcher";
+    public static final String SM_LAUNCHER_WINDOW_TITLE = "com.smartisanos.launcher/com.smartisanos.launcher.Launcher";
+
+    public static final int DURATION_THUMB_ANIM_MOVE_S = 200;
+    public static final int DURATION_THUMB_ANIM_MOVE_S_RST = 200;
+    public static final int OFFSET_THUMB_SHADOW = 46;
+    private int mThumbStates;
+
+    public static int THUMB_WINDOW_STATE_NORMAL = 0;
+    public static int THUMB_WINDOW_STATE_LEFTBOTTOM_SIDEBAR = 2;
+    public static int THUMB_WINDOW_STATE_RIGHTBOTTOM_SIDEBAR = 3;
+
+    int mActionState = PERFORM_THUMB_ACTION_IDLE;
+    public static int PERFORM_THUMB_ACTION_IDLE = 0;
+    public static int PERFORM_THUMB_ACTION_PENDING_DOWN = 1;
+    public static int PERFORM_THUMB_ACTION_FINISHED_DOWN = 2;
+    public static int PERFORM_THUMB_ACTION_PENDING_RESET = 3;
+    private boolean mResetTimeout = false;
+    private OnThumbEventsCallbacks mThumbEventsListener;
+
+    private ContentObserver mThumbSwitcherObserverSidebar = new ContentObserver(new Handler()) {
+        @Override
+        public void onChange(boolean selfChange) {
+            updateEnableModeConfig(mContext);
+        }
+    };
+
+    public static ThumbModeHelper getInstance(){
+        return sThumbModeHelper;
+    }
+
+    public static void init(Context context, WindowManagerService mService){
+        if (sThumbModeHelper == null) {
+            sThumbModeHelper = new ThumbModeHelper(context, mService);
+        }
+    }
+
+    private ThumbModeHelper(Context context, WindowManagerService mService){
+        this.mContext = context;
+        this.mService = mService;
+        mWallpaperManager = (WallpaperManagerService)ServiceManager.getService("wallpaper");
+
+        context.getContentResolver().registerContentObserver(
+                Settings.Global.getUriFor("side_bar_mode"), true,
+                mThumbSwitcherObserverSidebar);
+
+        updateEnableModeConfig(context);
+    }
+
+    private void updateEnableModeConfig(Context context){
+        int thumbModeEnableSidebar = Settings.Global.getInt(
+                context.getContentResolver(), "side_bar_mode", 1);
+
+        boolean enableS = thumbModeEnableSidebar == 1;
+
+        if(enableS != mEnableSidebar){
+            mEnableSidebar = enableS;
+            mService.updateThumbGestureDetectListener(mEnableSidebar );
+            updateThumbModeEnableState();
+        }
+    }
+
+    private void clearThumbWallpaperRes(){
+        UiThread.getHandler().post(new Runnable() {
+
+            @Override
+            public void run() {
+                if(mThumbModeWallpaper != null){
+                    mThumbModeWallpaper.setBackground(null);
+                    mThumbModeWallpaper = null;
+                    mCachedThumbWallTransMode = THUMB_WALL_NORMAL;
+                }
+            }
+        });
+    }
+
+    public boolean needAnimatedMove(){
+        return mAnimNeed;
+    }
+
+    public boolean needSetToThumbAnim() {
+        return mNeedSetToThumbModeAnim;
+    }
+
+    public boolean needSetToNormalAnim(){
+        return mNeedSetToNormalModeAnim;
+    }
+
+    public boolean needAdjustFrameToThumb(){
+        return mNeedAdjustFrameToThumbMode;
+    }
+
+    public boolean needAdjustFrameToNoraml() {
+        return mNeedAdjustFrameNormalMode;
+    }
+
+    public synchronized void requestTraversalToThumbMode(final int action){
+        if(UiThread.getHandler().hasCallbacks(doResetWindowStateRunnable)){
+            if(DEBUG){
+                Slog.d(TAG, "Ignore request do ACTIONS " + action + " Cause has pending reset run");
+            }
+            return;
+        }
+        boolean notBusyAnimating = mService.mAppTransition
+                .isAppTransitionTypeNone() == true
+                && mService.mAppTransition.isRunning() == false
+                && mService.mAppTransition.isReady() == false
+                && mService.mClosingApps.size() == 0
+                && mService.mOpeningApps.size() == 0;
+        if(DEBUG) {
+            Slog.d(TAG, "notBusyAnimating = " + notBusyAnimating + ", action = " + action + ", mThumbAction = " + mThumbAction + ", mThumbStates  = " + Integer.toHexString(mThumbStates));
+        }
+
+        if (isSystemInCanMoveState(action)) {
+            if (notBusyAnimating && isThumbModeEnable(action)
+                    && action != WindowManagerPolicy.ThumbModeFuncs.ACTION_RESET
+                    && ( mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) == 0) {
+                showThumbWallpaper(action);
+                if(isAppTransitionRunning()){
+                    removeThumbModeWallpaperWindow();
+                    return;
+                }
+                UiThread.getHandler().removeCallbacks(doResetWindowStateRunnable);
+                mNeedSetToThumbModeAnim = true;
+                mNeedSetToNormalModeAnim = false;
+                mNeedAdjustFrameToThumbMode = true;
+                mNeedAdjustFrameNormalMode = false;
+                mThumbAction = action;
+                mActionState = PERFORM_THUMB_ACTION_PENDING_DOWN;
+                mAnimNeed = true;
+                if (action == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR) {
+                    mThumbStates |= ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR;
+                    mThumbStates &= ~ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR;
+                    mThumbStates |= ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR;
+                } else if (action == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR) {
+                    mThumbStates |= ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR;
+                    mThumbStates |= ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR;
+                    mThumbStates &= ~ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR;
+                }
+                dispatchThumbStates();
+                mService.requestTraversal();
+                postAnimToThumbMode();
+            } else if (action == WindowManagerPolicy.ThumbModeFuncs.ACTION_RESET
+                    && (mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) {
+                if(DEBUG){
+                    Slog.d(TAG, "Request do ACTION_RESET");
+                }
+                showThumbWallpaper(action);
+                resetWindowState();
+            }
+        }
+    }
+
+    private boolean isAppTransitionRunning(){
+        return mService.mAppTransition.isRunning();
+    }
+
+    public void updatePerformThumbState(int lastState){
+        if(lastState == PERFORM_THUMB_ACTION_PENDING_DOWN){
+            mActionState = PERFORM_THUMB_ACTION_FINISHED_DOWN;
+        }else if (lastState == PERFORM_THUMB_ACTION_PENDING_RESET){
+            mActionState = PERFORM_THUMB_ACTION_IDLE;
+        }
+    }
+
+    public int getPendingThumbAction(){
+        return mThumbAction;
+    }
+
+    private boolean isSystemInCanMoveState(int action){
+        if(mService == null || !mService.mSystemReady){
+            return false;
+        }
+        if(action == ACTION_RESET){
+            return true;
+        }
+        return !isDisableThumbModeWinShowing();
+    }
+
+    private Runnable doResetWindowStateRunnable = new Runnable(){
+        @Override
+        public void run() {
+            resetWindowState();
+        }
+    };
+
+    public boolean isSysInSidebarMode(){
+        return (mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0;
+    }
+
+    // include one-handed mode and sidebar mode
+    public boolean isSysInThumbMode(){
+        return (mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0;
+    }
+
+    private Runnable resetTimeoutRun = new Runnable(){
+
+        @Override
+        public void run() {
+            mResetTimeout = true;
+        }
+    };
+
+    public void resetWindowState(){
+
+        if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+            mSysDoneToReturnNormalModeS = false;
+        }
+        if(!UiThread.getHandler().hasCallbacks(resetTimeoutRun)){
+            UiThread.getHandler().postDelayed(resetTimeoutRun, 400);
+        }
+        if(!mService.isAnimating() || mResetTimeout){
+            if(DEBUG){
+                if(mResetTimeout){
+                    Slog.d(TAG, "Request do ACTION_RESET, time out, go!");
+                }else{
+                    Slog.d(TAG, "Request do ACTION_RESET, good to go");
+                }
+            }
+            UiThread.getHandler().removeCallbacks(resetTimeoutRun);
+            mResetTimeout = false;
+            UiThread.getHandler().post(new Runnable(){
+                @Override
+                public void run() {
+                    if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+
+                        mSysDoneToReturnNormalModeS = false;
+                        mNeedSetToThumbModeAnim = false;
+                        mNeedSetToNormalModeAnim = true;
+                        mNeedAdjustFrameToThumbMode = false;
+                        mNeedAdjustFrameNormalMode = true;
+                        mAnimNeed = true;
+                        mSysDoneToThumbMode = false;
+                        mThumbAction = WindowManagerPolicy.ThumbModeFuncs.ACTION_RESET;
+                        mActionState = PERFORM_THUMB_ACTION_PENDING_RESET;
+                        mThumbStates &= ~ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR;
+                        mThumbStates &= ~ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR;
+                        mThumbStates &= ~ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR;
+                        postAnimToNormalMode();
+                        dispatchThumbStates();
+                        if(!mService.isAnimating()){
+                            mService.requestTraversal();
+                        }
+                    }
+                }
+            });
+        }else{
+            if(DEBUG){
+                Slog.d(TAG, "Request do ACTION_RESET, animating! pending it");
+            }
+            UiThread.getHandler().removeCallbacks(doResetWindowStateRunnable);
+            UiThread.getHandler().postDelayed(doResetWindowStateRunnable, INTERVAL_POLLING_DO_THUMB_ANIM);
+        }
+    }
+
+    public void postAnimToNormalMode(){
+        UiThread.getHandler().removeCallbacks(postAnimToNormalModeRun);
+        UiThread.getHandler().postDelayed(postAnimToNormalModeRun, 500);
+        removeThumbModeWallpaperWindow();
+    }
+
+    public void postAnimToThumbMode(){
+        mSysDoneToThumbMode = false;
+        UiThread.getHandler().removeCallbacks(postAnimToThumbModeRun);
+        UiThread.getHandler().postDelayed(postAnimToThumbModeRun, 500);
+    }
+
+    private Runnable postAnimToThumbModeRun = new Runnable(){
+
+        @Override
+        public void run() {
+            mSysDoneToThumbMode = true;
+        }
+    };
+
+    private Runnable postAnimToNormalModeRun = new Runnable(){
+
+        @Override
+        public void run() {
+            mSysDoneToReturnNormalModeS = true;
+            UiThread.getHandler().post(new Runnable(){
+                @Override
+                public void run() {
+                    mService.requestTraversal();
+                }
+            });
+        }
+    };
+
+    private Runnable showThumbWallpaperShadow = new Runnable(){
+
+        @Override
+        public void run() {
+            if (mThumbModeWallpaper != null) {
+                mThumbModeWallpaper
+                        .setScaleType(ImageView.ScaleType.FIT_XY);
+                mThumbModeWallpaper.setPadding(0, HEIGHT_THUMB_OFFSET
+                        - HEIGHT_THUMB_SHADOW, 0, OFFSET_THUMB_WALLPAPER);
+                mThumbModeWallpaper.setImageResource(com.android.internal.R.drawable.shadow_thumb_mode);
+            }
+        }
+    };
+
+    private Runnable hideThumbWallpaper = new Runnable(){
+
+        @Override
+        public void run() {
+            if(mThumbModeWallpaper == null){
+                return;
+            }
+            mThumbModeWallpaper.setVisibility(View.GONE);
+            mThumbModeWallpaper.setImageBitmap(null);
+        }
+    };
+
+    public boolean isSysDoneToReturnNormalModeS(){
+        return mSysDoneToReturnNormalModeS;
+    }
+
+    public void disableAnimatedMove() {
+        mAnimNeed = false;
+        mNeedSetToThumbModeAnim = false;
+    }
+
+    public boolean isThumbModeEnable(){
+        return  (mThumbStates & ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR) != 0;
+    }
+
+    public boolean isThumbModeEnable(int action){
+        if(action == WindowManagerPolicy.ThumbModeFuncs.ACTION_RESET){
+            return true;
+        }else if(action == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR
+                || action == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR){
+            return (mThumbStates & ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR) != 0;
+        }
+        return false;
+    }
+
+    private void updateThumbModeEnableState(){
+        int lastThumbStates = mThumbStates;
+        if(mCurrentRotationHori){
+            mThumbStates &= ~ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR;
+        }else{
+            if(mEnableSidebar){
+                mThumbStates |= ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR;
+            }else{
+                mThumbStates &= ~ViewRootImpl.BIT_THUMB_MODE_ENABLE_SIDEBAR;
+                if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0){
+                    resetWindowState();
+                }
+            }
+        }
+        if(lastThumbStates != mThumbStates){
+            dispatchThumbStates();
+        }
+    }
+
+    public float getInterceptTouchSize() {
+        return mInterceptTouchEventSize;
+    }
+
+    public void setRotation(int rot){
+        mCurrentRotationHori = (rot == Surface.ROTATION_90 || rot == Surface.ROTATION_270);
+        updateThumbModeEnableState();
+    }
+
+
+    private static final int sidebarWallResid = com.android.internal.R.drawable.sidebar_background;
+
+    private BitmapDrawable getThumbWallpaper(Context context, int resId, boolean tileMode, int transMode){
+        boolean matchCache = mCachedThumbWallTransMode == transMode && mCacheThumbWallBDResId == resId && mThumbWallpaperBmpDraw != null;
+        if(matchCache){
+            return mThumbWallpaperBmpDraw;
+        }
+        Bitmap thumbBmp = null;
+        InputStream is = context.getResources().openRawResource(resId);
+        if (is != null) {
+            int width = WIDTH_SCREEN;
+            int height = HEIGHT_THUMB_WALLPAPER_SCALE_MODE;
+
+            try {
+                BitmapFactory.Options options = new BitmapFactory.Options();
+                Bitmap bm = BitmapFactory.decodeStream(is, null, options);
+                thumbBmp = generateTileModeBitmap(context, bm, width, height, tileMode, transMode);
+            } catch (OutOfMemoryError e) {
+                Slog.w(TAG, "Can't decode stream", e);
+            } finally {
+                try {
+                    is.close();
+                } catch (IOException e) {
+                    // Ignore
+                }
+            }
+        }
+        if(thumbBmp != null){
+            mCachedThumbWallTransMode = transMode;
+            mCacheThumbWallBDResId = resId;
+            mThumbWallpaperBmpDraw = new BitmapDrawable(thumbBmp);
+        }
+        return mThumbWallpaperBmpDraw;
+    }
+
+    Bitmap generateTileModeBitmap(Context context, Bitmap bm, int width, int height, boolean tileModeRepeat, int transMode) {
+        if (bm == null) {
+            return null;
+        }
+
+        WindowManager wm = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
+        DisplayMetrics metrics = new DisplayMetrics();
+        wm.getDefaultDisplay().getMetrics(metrics);
+        bm.setDensity(metrics.noncompatDensityDpi);
+
+        /*if (width <= 0 || height <= 0
+                || (bm.getWidth() == width && bm.getHeight() == height)) {
+            return bm;
+        }*/
+
+        // This is the final bitmap we want to return.
+        try {
+            Bitmap newbm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+            newbm.setDensity(metrics.noncompatDensityDpi);
+
+            Canvas c = new Canvas(newbm);
+            Rect targetRect = new Rect();
+            targetRect.right = bm.getWidth();
+            targetRect.bottom = bm.getHeight();
+
+            int deltaw = width - targetRect.right;
+            int deltah = height - targetRect.bottom;
+
+            if (deltaw > 0 || deltah > 0) {
+                // We need to scale up so it covers the entire area.
+                float scale;
+                if (deltaw > deltah) {
+                    scale = width / (float)targetRect.right;
+                } else {
+                    scale = height / (float)targetRect.bottom;
+                }
+                targetRect.right = (int)(targetRect.right*scale);
+                targetRect.bottom = (int)(targetRect.bottom*scale);
+                deltaw = width - targetRect.right;
+                deltah = height - targetRect.bottom;
+            }
+            targetRect.offset(deltaw/2, deltah/2);
+
+
+
+            Paint paint = new Paint();
+            paint.setFilterBitmap(true);
+            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));
+
+            if(tileModeRepeat){
+                BitmapShader bs = new BitmapShader(bm, TileMode.REPEAT, TileMode.REPEAT);
+                paint.setShader(bs);
+                Matrix m = new Matrix();
+                m.postTranslate(targetRect.left, targetRect.top);
+                paint.getShader().setLocalMatrix(m);
+                c.drawRect(targetRect,paint);
+            }else{
+                c.drawBitmap(bm, 0, 0, paint);
+            }
+
+            if(transMode != THUMB_WALL_NORMAL){
+                Rect rect = getThumbWallTranRect(transMode);
+                Paint paintTrans = new Paint(Paint.ANTI_ALIAS_FLAG);
+                paintTrans.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));
+                paintTrans.setColor(Color.TRANSPARENT);
+                paintTrans.setAlpha(255);
+                c.drawRect(rect, paintTrans);
+            }
+
+            bm.recycle();
+            c.setBitmap(null);
+            return newbm;
+        } catch (OutOfMemoryError e) {
+            Slog.w(TAG, "Can't generate default bitmap", e);
+            return bm;
+        }
+    }
+
+    private Rect getThumbWallTranRect(int transMode){
+        int l = 0;
+        int t = 0;
+        int r = 0;
+        int b = 0;
+        switch(transMode){
+            case THUMB_WALL_L_TRANS_S:
+                 l = 0;
+                 t = SCALE_VERT_THUMB_OFFSET_S;
+                 r = WIDTH_SCREEN-SCALE_HORI_THUMB_OFFSET_S;
+                 b = HEIGHT_SCREEN;
+                 break;
+            case THUMB_WALL_R_TRANS_S:
+                 l = SCALE_HORI_THUMB_OFFSET_S;
+                 t = SCALE_VERT_THUMB_OFFSET_S;
+                 r = WIDTH_SCREEN;
+                 b = HEIGHT_SCREEN;
+                 break;
+            default:
+                 break;
+        }
+        return new Rect(l, t, r, b);
+    }
+
+    public void clearThumbWallpaper(){
+        UiThread.getHandler().post(new Runnable() {
+
+            @Override
+            public void run() {
+                if(mThumbModeWallpaper != null){
+                    mThumbModeWallpaper.setBackground(null);
+                    mThumbModeWallpaper.setImageBitmap(null);
+                    WindowManager wm = (WindowManager) mContext
+                            .getSystemService(Context.WINDOW_SERVICE);
+                    try{
+                        wm.removeView(mThumbModeWallpaper);
+                    }catch(Exception e){
+                        // thumb wallpaper already removed
+                    }
+                    mThumbModeWallpaper = null;
+                }
+            }
+        });
+    }
+
+    private static final int THUMB_WALL_NORMAL = 0;
+    private static final int THUMB_WALL_L_TRANS_S = 1;
+    private static final int THUMB_WALL_R_TRANS_S = 2;
+
+
+    private void showThumbWallpaper(final int action) {
+        if(!isThumbModeEnable(action) ||
+                ( (mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR) != 0) ||
+                    !isSystemInCanMoveState(action)){
+            return;
+        }
+        int transMode = THUMB_WALL_NORMAL;
+        if(action == ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR){
+            transMode = THUMB_WALL_L_TRANS_S;
+        }else if(action == ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR){
+            transMode = THUMB_WALL_R_TRANS_S;
+        }
+        final int transModeFinal = transMode;
+
+        UiThread.getHandler().removeCallbacks(hideThumbWallpaper);
+        UiThread.getHandler().postAtFrontOfQueue(new Runnable() {
+
+            @Override
+            public void run() {
+                if(mThumbModeWallpaper == null){
+                    WindowManager wm = (WindowManager) mContext
+                            .getSystemService(Context.WINDOW_SERVICE);
+
+                    mThumbModeWallpaper = new ImageView(mContext);
+
+                    WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+                    lp.type = WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL;
+                    lp.gravity = Gravity.LEFT | Gravity.TOP;
+                    lp.width = WIDTH_SCREEN;
+                    lp.height = HEIGHT_THUMB_WALLPAPER_SCALE_MODE;
+                    lp.format = PixelFormat.RGBA_8888;
+                    lp.setTitle(THUMB_WALLPAPER_WINDOW_TITLE);
+                    lp.inputFeatures |= WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL;
+                    lp.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN
+                            | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
+                            | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+                            | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
+                    lp.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_EXT_FORCE_FULL_SCREEN;
+                    lp.token = getWindowOfType(WindowManager.LayoutParams.TYPE_WALLPAPER).mClient.asBinder();
+                    lp.windowAnimations = com.android.internal.R.style.Animation_Thumbwallpaper;
+                    wm.addView(mThumbModeWallpaper, lp);
+                }
+
+                BitmapDrawable wall = getThumbWallpaper(mContext, sidebarWallResid , true, transModeFinal);
+                mThumbModeWallpaper.setBackground(wall);
+                mThumbModeWallpaper.setVisibility(View.VISIBLE);
+            }
+        });
+    }
+
+    WindowState getWindowOfType(int type){
+        WindowList windows = mService.getDefaultWindowListLocked();
+        final int N = windows.size();
+        int i = N;
+        while (i > 0) {
+            i--;
+            WindowState w;
+            try{
+                w = windows.get(i);
+            }catch(IndexOutOfBoundsException e){
+                return null;
+            }
+            if (w != null && type == w.getAttrs().type) {
+                return w;
+            }
+        }
+        return null;
+    }
+
+    void removeThumbModeWallpaperWindow() {
+        UiThread.getHandler().post(hideThumbWallpaper);
+    }
+
+    boolean isDisableThumbModeWinShowing(){
+        WindowList windows = mService.getDefaultWindowListLocked();
+        final int N = windows.size();
+        int i = N;
+        while (i > 0) {
+            i--;
+            WindowState w;
+            try{
+                w = windows.get(i);
+            }catch(IndexOutOfBoundsException e){
+                return false;
+            }
+            if (w != null &&
+                    (SCREEN_SHOT_WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || SHOT_SCREEN_SHOT_WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || INCALL_UI_WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || SMARTISAN_POWER_MENU_TITLE.equals(w.getAttrs().getTitle())
+                            || REMOTE_HELPER_CLIENT_WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || REMOTE_HELPER_CONTROLED_CLIENT_WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || SCROLL_SCREEN_SHOT__WINDOW_TITLE.equals(w.getAttrs().getTitle())
+                            || POWER_SAVE_LAUNCHER_TITLE.equals(w.getAttrs().getTitle())
+                            || w.getAttrs().type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL)) {
+                if(w.isVisibleLw()){
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    void updateWindowStateWhenFocusChanged(WindowState old, WindowState cur){
+        if(isSysInThumbMode()){
+            if(cur != null && cur.mAttrs != null &&
+                    (cur.mAttrs.type == WindowManager.LayoutParams.TYPE_BOOT_PROGRESS)){
+                postResetWindowState();
+            }
+        }
+    }
+
+    void postResetWindowState(){
+        UiThread.getHandler().postDelayed(new Runnable() {
+
+            @Override
+            public void run() {
+                if(isSysInThumbMode()){
+                    resetWindowState();
+                }
+            }
+        }, 500);
+    }
+
+    public static boolean isNormalPopupWindow(WindowState win){
+        return win != null &&
+                win.mAttrs.getTitle().toString().startsWith("PopupWindow") &&
+                win.mAttrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
+    }
+
+    void setThumbOffset(int scaleModeVertOffsetS, int scaleModeHoriOffsetS, int screenWidth, int screenHeight){
+        SCALE_HORI_THUMB_OFFSET_S = scaleModeHoriOffsetS;
+        SCALE_VERT_THUMB_OFFSET_S = scaleModeVertOffsetS;
+        WIDTH_SCREEN = screenWidth;
+        HEIGHT_SCREEN = screenHeight;
+        HEIGHT_THUMB_WALLPAPER_SCALE_MODE = screenHeight;
+    }
+
+    int getThumbStates(){
+        return mThumbStates;
+    }
+
+    int mLastThumbState;
+
+    void dispatchThumbStates(){
+        if(mLastThumbState != mThumbStates){
+            if ((mLastThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR ) != 0 
+                    && (mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR ) == 0) {
+                if(mThumbEventsListener != null){
+                    mThumbEventsListener.onExitSidebarMode();
+                }
+            } else if ((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR ) != 0 
+                    && (mLastThumbState & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_SIDEBAR ) == 0) {
+                if(mThumbEventsListener != null){
+                    mThumbEventsListener.onEnterSidebarMode(mThumbStates);
+                }
+            }
+            mLastThumbState = mThumbStates;
+            mService.dispatchThumbStateToPolicy(mThumbStates);
+        }
+    }
+
+    void dispatchThumbStatesOnlyWin(WindowState win) {
+        if(win != null && win.isAlive()){
+            if (win != null && win.mClient != null) {
+                dispatchThumbStatesAsynced(win.mClient, mThumbStates);
+            }
+        }
+    }
+
+    private void dispatchThumbStatesAsynced(IWindow c, int s) {
+        final IWindow client = c;
+        final int state = s;
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                if(client == null) return;
+                try {
+                    client.dispatchThumbModeStates(state);
+                } catch (RemoteException e) {
+                    Slog.w(TAG, "Dispatch thumb states failed, ", e);
+                }
+            }
+        }).start();
+    }
+
+    public static final int THUMB_ANIM_TO_LEFT_BOTTOM = 4;
+    public static final int THUMB_ANIM_TO_RIGHT_BOTTOM = 5;
+    public static final int THUMB_ANIM_TO_LEFT_BOTTOM_NOTFULL = 6;
+    public static final int THUMB_ANIM_TO_RIGHT_BOTTOM_NOTFULL = 7;
+    public static final int THUMB_ANIM_RESET_LEFT_BOTTOM_S = 9;
+    public static final int THUMB_ANIM_RESET_RIGHT_BOTTOM_S = 10;
+    public static final int THUMB_ANIM_RESET_LEFT_BOTTOM_NOTFULL_S= 11;
+    public static final int THUMB_ANIM_RESET_RIGHT_BOTTOM_NOTFULL_S = 12;
+
+    public Animation getThumbAnimation(int animType){
+        Animation anim = null;
+        float scale = 0;
+        switch (animType){
+            case THUMB_ANIM_TO_LEFT_BOTTOM:
+                scale =mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        1 / scale,
+                        1.0f,
+                        1 / scale,
+                        1.0f,
+                        Animation.ABSOLUTE,
+                        0,
+                        Animation.ABSOLUTE,
+                        HEIGHT_SCREEN * scale);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S);
+                return anim;
+            case THUMB_ANIM_TO_RIGHT_BOTTOM:
+                scale =mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        1 / scale,
+                        1.0f,
+                        1 / scale,
+                        1.0f,
+                        Animation.ABSOLUTE,
+                        WIDTH_SCREEN * scale,
+                        Animation.ABSOLUTE,
+                        HEIGHT_SCREEN * scale);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S);
+
+                return anim;
+            case THUMB_ANIM_TO_LEFT_BOTTOM_NOTFULL:
+                scale = mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        1 / scale,
+                        1.0f,
+                        1 / scale,
+                        1.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        0.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        1.0f);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S);
+
+                return anim;
+            case THUMB_ANIM_TO_RIGHT_BOTTOM_NOTFULL:
+                scale =  mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        1 / scale,
+                        1.0f,
+                        1 / scale,
+                        1.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        1.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        1.0f);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S);
+
+                return anim;
+            case THUMB_ANIM_RESET_LEFT_BOTTOM_S:
+                scale = mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        scale,
+                        1.0f,
+                        scale,
+                        1.0f,
+                        Animation.ABSOLUTE,
+                        0,
+                        Animation.ABSOLUTE, HEIGHT_SCREEN);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S_RST);
+                return anim;
+            case THUMB_ANIM_RESET_RIGHT_BOTTOM_S:
+                scale = mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        scale,
+                        1.0f,
+                        scale,
+                        1.0f,
+                        Animation.ABSOLUTE,
+                        WIDTH_SCREEN,
+                        Animation.ABSOLUTE, HEIGHT_SCREEN);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S_RST);
+                return anim;
+            case THUMB_ANIM_RESET_LEFT_BOTTOM_NOTFULL_S:
+                scale = mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        scale,
+                        1.0f,
+                        scale,
+                        1.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        0,
+                        Animation.RELATIVE_TO_SELF, 1);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S_RST);
+                return anim;
+            case THUMB_ANIM_RESET_RIGHT_BOTTOM_NOTFULL_S:
+                scale = mService.mScaleThumbScaleS;
+                anim = new ScaleAnimation(
+                        scale,
+                        1.0f,
+                        scale,
+                        1.0f,
+                        Animation.RELATIVE_TO_SELF,
+                        1,
+                        Animation.RELATIVE_TO_SELF, 1);
+                anim.setDuration(ThumbModeHelper.DURATION_THUMB_ANIM_MOVE_S_RST);
+                return anim;
+            default: return null;
+        }
+    }
+
+    public void setThumbEventsListener(OnThumbEventsCallbacks callback){
+        mThumbEventsListener = callback;
+    }
+
+    public Rect getAppScreenRect(int dw, int dh, int statusBarHeight) {
+        int left = 0;
+        int top = statusBarHeight;
+        int right = dw;
+        int bottom = dh;
+        if ((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0) {
+            top = SCALE_VERT_THUMB_OFFSET_S + (int)(statusBarHeight * ((WIDTH_SCREEN-SCALE_HORI_THUMB_OFFSET_S)/(float)WIDTH_SCREEN));
+            left = SCALE_HORI_THUMB_OFFSET_S;
+        } else if ((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+            top = SCALE_VERT_THUMB_OFFSET_S + (int)(statusBarHeight * ((WIDTH_SCREEN-SCALE_HORI_THUMB_OFFSET_S)/(float)WIDTH_SCREEN));
+            right = dw - SCALE_HORI_THUMB_OFFSET_S;
+        }
+        return new Rect(left, top, right, bottom);
+    }
+
+    public boolean getCropRect(Rect outRect) {
+        if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+            outRect.left = 0;
+            outRect.top = SCALE_VERT_THUMB_OFFSET_S;
+            outRect.right = WIDTH_SCREEN - SCALE_HORI_THUMB_OFFSET_S;
+            outRect.bottom = HEIGHT_SCREEN;
+        } else if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0) {
+            outRect.left = SCALE_HORI_THUMB_OFFSET_S;
+            outRect.top = SCALE_VERT_THUMB_OFFSET_S;
+            outRect.right = WIDTH_SCREEN;
+            outRect.bottom = HEIGHT_SCREEN;
+        } else {
+            outRect.left = outRect.top = outRect.right = outRect.bottom = 0;
+        }
+        return true;
+    }
+
+    public void clampSurfaceRect(Rect clipRect, int l, int t, int w, int h, boolean isCamPreview, float hScale, float vScale) {
+        if(isCamPreview == false){
+            if(mSysDoneToThumbMode == false) return;
+        }
+        if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_L_CORNER_SIDEBAR) != 0){
+            int offset = (int)(l + w*hScale - WIDTH_SCREEN*mService.mScaleThumbScaleS);
+            if(offset > 0){
+                clipRect.right -= offset/hScale;
+                if(clipRect.right - clipRect.left == 0){
+                    clipRect.right += 1;
+                }
+            }
+            if(t < mService.mScaleThumbYOffsetS){
+                clipRect.top += (mService.mScaleThumbYOffsetS - t)/vScale;
+                if(clipRect.top - clipRect.bottom == 0){
+                    clipRect.top -= 1;
+                }
+            }
+        }else if((mThumbStates & ViewRootImpl.BIT_WINDOW_IN_THUMB_MODE_TYPE_R_CORNER_SIDEBAR) != 0) {
+            int offset = SCALE_HORI_THUMB_OFFSET_S - l;
+            if (offset > 0) {
+                clipRect.left += offset / hScale + 0.5f;
+                if (clipRect.right - clipRect.left == 0) {
+                    clipRect.left -= 1;
+                }
+            }
+            if (t < mService.mScaleThumbYOffsetS) {
+                clipRect.top += (mService.mScaleThumbYOffsetS - t) / vScale;
+                if (clipRect.top - clipRect.bottom == 0) {
+                    clipRect.top -= 1;
+                }
+            }
+        }
+    }
+
+    public interface OnThumbEventsCallbacks {
+        void onEnterSidebarMode(int state);
+        void onExitSidebarMode();
+    }
+
+    // real scale used to scale window
+    public float getSidebarScale(){
+        float width = mService.mDisplayMetrics.widthPixels;
+        int sidebarWidthPx = mContext.getResources().getDimensionPixelSize(
+                                com.android.internal.R.dimen.sidebar_width);
+        return 1 - ((sidebarWidthPx-0.5f)/width);
+    }
+
+    // scale only used to determine position offset
+    public float getSidebarScaleSmall(){
+        float width = mService.mDisplayMetrics.widthPixels;
+        int sidebarWidthPx = mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.sidebar_width);
+        return 1 - (sidebarWidthPx/width);
+    }
+
+    public boolean isSidebarHasFocus(){
+        return mService.mCurrentFocus != null &&
+                (mService.mCurrentFocus.getAttrs().type == WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS
+                    || (mService.mCurrentFocus.mAttachedWindow != null
+                            && mService.mCurrentFocus.mAttachedWindow.getAttrs().type == WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS));
+    }
+
+}
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 3d79757..462f528 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -849,6 +849,14 @@ public class WindowManagerService extends IWindowManager.Stub
     // For example, when this flag is true, there will be no wallpaper service.
     final boolean mOnlyCore;
 
+    public float mScaleThumbXOffsetS;
+    public float mScaleThumbYOffsetS;
+    public float mScaleThumbScaleS;
+    int mSreenNaturalHeight;
+    int mSreenNaturalWidth;
+
+    boolean mSystemReady;
+
     // List of clients without a transtiton animation that we notify once we are done transitioning
     // since they won't be notified through the app window animator.
     private final List<IBinder> mNoAnimationNotifyOnTransitionFinished = new ArrayList<>();
@@ -903,7 +911,7 @@ public class WindowManagerService extends IWindowManager.Stub
             public void run() {
                 WindowManagerPolicyThread.set(Thread.currentThread(), Looper.myLooper());
 
-                mPolicy.init(mContext, WindowManagerService.this, WindowManagerService.this);
+                mPolicy.init(mContext, WindowManagerService.this, WindowManagerService.this, ThumbModeHelper.getInstance());
             }
         }, 0);
     }
@@ -1002,6 +1010,8 @@ public class WindowManagerService extends IWindowManager.Stub
                 com.android.internal.R.bool.config_allowTheaterModeWakeFromWindowLayout);
 
         LocalServices.addService(WindowManagerInternal.class, new LocalService());
+
+        ThumbModeHelper.init(mContext, this);
         initPolicy();
 
         // Add ourself to the Watchdog monitors.
@@ -3022,7 +3032,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     w.mGivenVisibleInsets.set(visibleInsets);
                     w.mGivenTouchableRegion.set(touchableRegion);
                     w.mTouchableInsets = touchableInsets;
-                    if (w.mGlobalScale != 1) {
+                    if (w.mGlobalScale != 1 && !ThumbModeHelper.getInstance().isSysInThumbMode()) {
                         w.mGivenContentInsets.scale(w.mGlobalScale);
                         w.mGivenVisibleInsets.scale(w.mGlobalScale);
                         w.mGivenTouchableRegion.scale(w.mGlobalScale);
@@ -5652,7 +5662,8 @@ public class WindowManagerService extends IWindowManager.Stub
     @Override
     public float getCurrentAnimatorScale() {
         synchronized(mWindowMap) {
-            return mAnimationsDisabled ? 0 : mAnimatorDurationScaleSetting;
+            return (mAnimationsDisabled
+                        && ThumbModeHelper.getInstance().isSysDoneToReturnNormalModeS()) ? 0 : mAnimatorDurationScaleSetting;
         }
     }
 
@@ -6188,6 +6199,9 @@ public class WindowManagerService extends IWindowManager.Stub
         }
     }
 
+    private int mThumbnailWidthFullScreen = -1;
+    private int mThumbnailHeightFUllScreen = -1;
+
     /**
      * Takes a snapshot of the screen.  In landscape mode this grabs the whole screen.
      * In portrait mode, it grabs the upper region of the screen based on the vertical dimension
@@ -6256,6 +6270,7 @@ public class WindowManagerService extends IWindowManager.Stub
         Bitmap bm = null;
 
         int maxLayer = 0;
+        int statusBarHeight = 0;
         final Rect frame = new Rect();
         final Rect stackBounds = new Rect();
 
@@ -6283,6 +6298,8 @@ public class WindowManagerService extends IWindowManager.Stub
         final int aboveAppLayer = (mPolicy.windowTypeToLayerLw(TYPE_APPLICATION) + 1)
                 * TYPE_LAYER_MULTIPLIER + TYPE_LAYER_OFFSET;
 
+        boolean isFullScreen = false;
+
         while (true) {
             if (retryCount++ > 0) {
                 // Reset max/min layers on retries so we don't accidentally take a screenshot of a
@@ -6310,7 +6327,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         if (!appIsImTarget) {
                             continue;
                         }
-                    } else if (ws.mIsWallpaper) {
+                    } else if (ws.mIsWallpaper || ws.mIsFakeWallpaper) {
                         if (appWin == null) {
                             // We have not ran across the target window yet, so it is probably
                             // behind the wallpaper. This can happen when the keyguard is up and
@@ -6357,6 +6374,11 @@ public class WindowManagerService extends IWindowManager.Stub
                         }
                     }
 
+                    if ((ws.mAttrs.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 ||
+                            (ws.mSystemUiVisibility & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
+                        isFullScreen = true;
+                    }
+
                     if (ws.mAppToken != null && ws.mAppToken.token == appToken &&
                             ws.isDisplayedLw() && winAnim.mSurfaceShown) {
                         screenshotReady = true;
@@ -6388,6 +6410,11 @@ public class WindowManagerService extends IWindowManager.Stub
                     continue;
                 }
 
+                if (!isFullScreen) {
+                    statusBarHeight =
+                            mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
+                }
+
                 // Screenshot is ready to be taken. Everything from here below will continue
                 // through the bottom of the loop and return a value. We only stay in the loop
                 // because we don't want to release the mWindowMap lock until the screenshot is
@@ -6419,6 +6446,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     height = frame.height();
                 }
 
+                /*
                 // Tell surface flinger what part of the image to crop. Take the top
                 // right part of the application, and crop the larger dimension to fit.
                 Rect crop = new Rect(frame);
@@ -6429,6 +6457,8 @@ public class WindowManagerService extends IWindowManager.Stub
                     int cropHeight = (int)((float)height / (float)width * frame.width());
                     crop.bottom = crop.top + cropHeight;
                 }
+                */
+                Rect crop = ThumbModeHelper.getInstance().getAppScreenRect(dw, dh, statusBarHeight);
 
                 // The screenshot API does not apply the current screen rotation.
                 int rot = getDefaultDisplayContentLocked().getDisplay().getRotation();
@@ -6436,6 +6466,9 @@ public class WindowManagerService extends IWindowManager.Stub
                 rot = (rot + mSfHwRotation) % 4;
 
                 if (rot == Surface.ROTATION_90 || rot == Surface.ROTATION_270) {
+                    int tmp = width;
+                    width = height;
+                    height = tmp;
                     rot = (rot == Surface.ROTATION_90) ? Surface.ROTATION_270 : Surface.ROTATION_90;
                 }
 
@@ -6667,6 +6700,8 @@ public class WindowManagerService extends IWindowManager.Stub
             return false;
         }
 
+        resetWindowState();
+
         if (DEBUG_ORIENTATION) {
             Slog.v(TAG,
                 "Rotation changed to " + rotation + (altOrientation ? " (alt)" : "")
@@ -6677,6 +6712,7 @@ public class WindowManagerService extends IWindowManager.Stub
         mRotation = rotation;
         mAltOrientation = altOrientation;
         mPolicy.setRotationLw(mRotation);
+        ThumbModeHelper.getInstance().setRotation(mRotation);
 
         mWindowsFreezingScreen = WINDOWS_FREEZING_SCREENS_ACTIVE;
         mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
@@ -7567,7 +7603,7 @@ public class WindowManagerService extends IWindowManager.Stub
     // -------------------------------------------------------------
 
     IBinder prepareDragSurface(IWindow window, SurfaceSession session,
-            int flags, int width, int height, Surface outSurface) {
+            int flags, int width, int height, Surface outSurface, float delX, float delY, int showAnimDelay) {
         if (DEBUG_DRAG) {
             Slog.d(TAG, "prepare drag surface: w=" + width + " h=" + height
                     + " flags=" + Integer.toHexString(flags) + " win=" + window
@@ -7593,7 +7629,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         outSurface.copyFrom(surface);
                         final IBinder winBinder = window.asBinder();
                         token = new Binder();
-                        mDragState = new DragState(this, token, surface, flags, winBinder);
+                        mDragState = new DragState(this, token, surface, width, height, flags, winBinder, delX, delY, showAnimDelay);
                         token = mDragState.mToken = new Binder();
 
                         // 5 second timeout for this window to actually begin the drag
@@ -7750,6 +7786,7 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         updateCircularDisplayMaskIfNeeded();
+        initThumbConfigs();
     }
 
     private void displayReady(int displayId) {
@@ -7762,8 +7799,28 @@ public class WindowManagerService extends IWindowManager.Stub
         }
     }
 
+    private void initThumbConfigs(){
+        final DisplayContent defaultDisplay = getDefaultDisplayContentLocked();
+        if(defaultDisplay != null){
+            final DisplayInfo defaultInfo = defaultDisplay.getDisplayInfo();
+            mSreenNaturalWidth = defaultInfo.getNaturalWidth();
+            mSreenNaturalHeight = defaultInfo.getNaturalHeight();
+            mScaleThumbScaleS = ThumbModeHelper.getInstance().getSidebarScale();
+            mScaleThumbXOffsetS = mSreenNaturalWidth - mSreenNaturalWidth * ThumbModeHelper.getInstance().getSidebarScaleSmall();
+            mScaleThumbYOffsetS = mSreenNaturalHeight - mSreenNaturalHeight * ThumbModeHelper.getInstance().getSidebarScaleSmall();
+            mPolicy.setThumbOffset((int)mScaleThumbYOffsetS, (int)mScaleThumbXOffsetS, mSreenNaturalWidth, mSreenNaturalHeight);
+            ThumbModeHelper.getInstance().setThumbOffset((int)mScaleThumbYOffsetS, (int)mScaleThumbXOffsetS, mSreenNaturalWidth, mSreenNaturalHeight);
+            if(ThumbModeHelper.DEBUG){
+                Slog.d(ThumbModeHelper.TAG, "init thumb configs, "  +
+                        ", ScaleS " + mScaleThumbScaleS + ",  "  +
+                        " ScaleXOffsetS " + mScaleThumbXOffsetS + ", ScaleYOffsetS " + mScaleThumbYOffsetS);
+            }
+        }
+    }
+
     public void systemReady() {
         mPolicy.systemReady();
+        mSystemReady = true;
     }
 
     // -------------------------------------------------------------
@@ -7814,6 +7871,7 @@ public class WindowManagerService extends IWindowManager.Stub
         public static final int CHECK_IF_BOOT_ANIMATION_FINISHED = 37;
         public static final int RESET_ANR_MESSAGE = 38;
         public static final int WALLPAPER_DRAW_PENDING_TIMEOUT = 39;
+        public static final int DRAG_STATE_RESET = 50;
 
         @Override
         public void handleMessage(Message msg) {
@@ -8175,9 +8233,11 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                     synchronized (mWindowMap) {
                         // !!! TODO: ANR the app that has failed to start the drag in time
+                        removeMessages(DRAG_STATE_RESET);
                         if (mDragState != null) {
                             mDragState.unregister();
                             mInputMonitor.updateInputWindowsLw(true /*force*/);
+                            mDragState.removeAnimRun();
                             mDragState.reset();
                             mDragState = null;
                         }
@@ -8199,6 +8259,18 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                     break;
                 }
+                case DRAG_STATE_RESET: {
+                    if (DEBUG_DRAG) {
+                        Slog.w(TAG, "Time to reset drag state");
+                    }
+                    synchronized (mWindowMap) {
+                        // !!! TODO: ANR the drag-receiving app
+                        if (mDragState != null) {
+                            mDragState.handleReset();
+                        }
+                    }
+                    break;
+                }
 
                 case REPORT_HARD_KEYBOARD_STATUS_CHANGE: {
                     notifyHardKeyboardStatusChange();
@@ -8869,7 +8941,8 @@ public class WindowManagerService extends IWindowManager.Stub
                 numRemoved++;
                 continue;
             } else if (lastBelow == i-1) {
-                if (w.mAttrs.type == TYPE_WALLPAPER) {
+                if (w.mAttrs.type == TYPE_WALLPAPER 
+                        || (w.mAttachedWindow != null && w.mAttachedWindow.mAttrs.type == TYPE_WALLPAPER)) {
                     lastBelow = i;
                 }
             }
@@ -9943,6 +10016,16 @@ public class WindowManagerService extends IWindowManager.Stub
         }
     }
 
+    public void resetWindowState(){
+        if(ThumbModeHelper.getInstance().isSysInThumbMode()){
+            ThumbModeHelper.getInstance().resetWindowState();
+        }
+    }
+
+    public int getThumbState(){
+        return ThumbModeHelper.getInstance().getThumbStates();
+    }
+
     // "Something has changed!  Let's make it correct now."
     private final void performLayoutAndPlaceSurfacesLockedInner(boolean recoveringMemory) {
         if (DEBUG_WINDOW_TRACE) {
@@ -9990,6 +10073,9 @@ public class WindowManagerService extends IWindowManager.Stub
         final int defaultDw = defaultInfo.logicalWidth;
         final int defaultDh = defaultInfo.logicalHeight;
 
+        final int appFullWidth = defaultInfo.appWidth;
+        final int appFullHeight = defaultInfo.appHeight;
+
         if (SHOW_LIGHT_TRANSACTIONS) Slog.i(TAG,
                 ">>> OPEN TRANSACTION performLayoutAndPlaceSurfaces");
         SurfaceControl.openTransaction();
@@ -10080,7 +10166,9 @@ public class WindowManagerService extends IWindowManager.Stub
                                 mPolicy.applyPostLayoutPolicyLw(w, w.mAttrs, w.mAttachedWindow);
                             }
                         }
-                        displayContent.pendingLayoutChanges |= mPolicy.finishPostLayoutPolicyLw();
+                        int policyLayoutChanges = mPolicy.finishPostLayoutPolicyLw();
+                        policyLayoutChanges &= ~WindowManagerPolicy.FINISH_LAYOUT_TOP_FULLSCREEN;
+                        displayContent.pendingLayoutChanges |= policyLayoutChanges;
                         if (DEBUG_LAYOUT_REPEATS) debugLayoutRepeats(
                             "after finishPostLayoutPolicyLw", displayContent.pendingLayoutChanges);
                     }
@@ -10093,6 +10181,8 @@ public class WindowManagerService extends IWindowManager.Stub
 
                 // Only used if default window
                 final boolean someoneLosingFocus = !mLosingFocus.isEmpty();
+                int performThumbState = ThumbModeHelper.getInstance().mActionState;
+                boolean animStateApplied = false;
 
                 final int N = windows.size();
                 for (i=N-1; i>=0; i--) {
@@ -10131,30 +10221,80 @@ public class WindowManagerService extends IWindowManager.Stub
 
                     // If the window has moved due to its containing content frame changing, then
                     // notify the listeners and optionally animate it.
+                    boolean doAnim = w.adjustThumbLayout();
                     if (w.hasMoved()) {
-                        // Frame has moved, containing content frame has also moved, and we're not
-                        // currently animating... let's do something.
-                        final int left = w.mFrame.left;
-                        final int top = w.mFrame.top;
-                        if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
-                            Animation a = AnimationUtils.loadAnimation(mContext,
-                                    com.android.internal.R.anim.window_move_from_decor);
-                            winAnimator.setAnimation(a);
+                        Animation animTrans;
+                        if (ThumbModeHelper.getInstance().needSetToThumbAnim() && doAnim) {
+                            if (ThumbModeHelper.getInstance().needAnimatedMove()) {
+                                 if (ThumbModeHelper.getInstance()
+                                        .getPendingThumbAction() == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR
+                                        || ThumbModeHelper.getInstance()
+                                        .getPendingThumbAction() == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR) {
+
+                                    if((w.mWidthBase >= appFullWidth && w.mHeightBase >= appFullHeight)
+                                            || (w.mTopBase == 0 && w.mLeftBase == 0)){
+                                        Animation animScale = (ThumbModeHelper.getInstance()
+                                                    .getPendingThumbAction() == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR)?
+                                                ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_TO_LEFT_BOTTOM) :
+                                                ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_TO_RIGHT_BOTTOM);
+                                        winAnimator.setAnimation(animScale);
+                                        animStateApplied = true;
+                                    }else{
+                                        Animation animScale = (ThumbModeHelper.getInstance()
+                                                        .getPendingThumbAction() == WindowManagerPolicy.ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR )?
+                                                ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_TO_LEFT_BOTTOM_NOTFULL) :
+                                                ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_TO_RIGHT_BOTTOM_NOTFULL);
+                                        winAnimator.setAnimation(animScale);
+                                        animStateApplied = true;
+                                    }
+                                }
+                            }
+                        } else if (ThumbModeHelper.getInstance().needSetToNormalAnim() && doAnim) {
+                            if (ThumbModeHelper.getInstance().needAnimatedMove()) {
+                                if (w.mStateThumbMode == ThumbModeHelper.THUMB_WINDOW_STATE_RIGHTBOTTOM_SIDEBAR
+                                        || w.mStateThumbMode == ThumbModeHelper.THUMB_WINDOW_STATE_LEFTBOTTOM_SIDEBAR) {
+                                        if((w.mWidthBase >= appFullWidth && w.mHeightBase >= appFullHeight)
+                                                || (w.mTopBase == 0 && w.mLeftBase == 0)){
+                                            Animation animScale = (w.mStateThumbMode == ThumbModeHelper.THUMB_WINDOW_STATE_LEFTBOTTOM_SIDEBAR) ?
+                                                    ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_RESET_LEFT_BOTTOM_S) :
+                                                    ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_RESET_RIGHT_BOTTOM_S);
+                                            winAnimator.setAnimation(animScale);
+                                            animStateApplied = true;
+                                        }else{
+                                            Animation animScale = (w.mStateThumbMode == ThumbModeHelper.THUMB_WINDOW_STATE_LEFTBOTTOM_SIDEBAR) ?
+                                                    ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_RESET_LEFT_BOTTOM_NOTFULL_S) :
+                                                    ThumbModeHelper.getInstance().getThumbAnimation(ThumbModeHelper.THUMB_ANIM_RESET_RIGHT_BOTTOM_NOTFULL_S);
+                                            winAnimator.setAnimation(animScale);
+                                            animStateApplied = true;
+                                        }
+                                }
+                            }
+                        } else {
+                            if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
+                                animTrans = AnimationUtils.loadAnimation(mContext,
+                                        com.android.internal.R.anim.window_move_from_decor);
+                                winAnimator.setAnimation(animTrans);
+                                animStateApplied = true;
+                            }
+                        }
+                        if(animStateApplied){
+                            final int left = w.mFrame.left;
+                            final int top = w.mFrame.top;
                             winAnimator.mAnimDw = w.mLastFrame.left - left;
                             winAnimator.mAnimDh = w.mLastFrame.top - top;
                             winAnimator.mAnimateMove = true;
                             winAnimator.mAnimatingMove = true;
-                        }
 
-                        //TODO (multidisplay): Accessibility supported only for the default display.
-                        if (mAccessibilityController != null
-                                && displayId == Display.DEFAULT_DISPLAY) {
-                            mAccessibilityController.onSomeWindowResizedOrMovedLocked();
-                        }
+                            //TODO (multidisplay): Accessibility supported only for the default display.
+                            if (mAccessibilityController != null
+                                    && displayId == Display.DEFAULT_DISPLAY) {
+                                mAccessibilityController.onSomeWindowResizedOrMovedLocked();
+                            }
 
-                        try {
-                            w.mClient.moved(left, top);
-                        } catch (RemoteException e) {
+                            try {
+                                w.mClient.moved(left, top);
+                            } catch (RemoteException e) {
+                            }
                         }
                     }
 
@@ -10253,6 +10393,12 @@ public class WindowManagerService extends IWindowManager.Stub
                     updateResizingWindows(w);
                 }
 
+                ThumbModeHelper.getInstance().updatePerformThumbState(performThumbState);
+                if(animStateApplied){
+                    ThumbModeHelper.getInstance().disableAnimatedMove();
+                    animStateApplied = false;
+                }
+
                 mDisplayManagerInternal.setDisplayProperties(displayId,
                         mInnerFields.mDisplayHasContent, mInnerFields.mPreferredRefreshRate,
                         mInnerFields.mPreferredModeId,
@@ -10582,6 +10728,10 @@ public class WindowManagerService extends IWindowManager.Stub
         }
     }
 
+    public boolean isAnimating(){
+        return mAnimator.mAnimating;
+    }
+
     void requestTraversalLocked() {
         if (!mTraversalScheduled) {
             mTraversalScheduled = true;
@@ -10818,6 +10968,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 mInputMonitor.setInputFocusLw(mCurrentFocus, updateInputWindows);
             }
 
+            ThumbModeHelper.getInstance().updateWindowStateWhenFocusChanged(oldFocus, mCurrentFocus);
             Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);
             return true;
         }
@@ -12151,4 +12302,17 @@ public class WindowManagerService extends IWindowManager.Stub
             }
         }
     }
+
+    void updateThumbGestureDetectListener(boolean enable){
+        mPolicy.updateThumbGestureDetectListener(enable);
+    }
+
+    void dispatchThumbStateToPolicy(int thumbState){
+        mPolicy.dispatchThumbState(thumbState);
+    }
+
+    void dispatchThumbInterSizeToPolicy(float size){
+        mPolicy.dispatchThumbInterSize(size);
+    }
+
 }
diff --git a/services/core/java/com/android/server/wm/WindowState.java b/services/core/java/com/android/server/wm/WindowState.java
index 3bef41b..2601fc1 100644
--- a/services/core/java/com/android/server/wm/WindowState.java
+++ b/services/core/java/com/android/server/wm/WindowState.java
@@ -24,7 +24,10 @@ import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD;
 import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS;
 import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
 import static com.android.server.wm.WindowManagerService.DEBUG_CONFIGURATION;
 import static com.android.server.wm.WindowManagerService.DEBUG_LAYOUT;
 import static com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION;
@@ -65,6 +68,7 @@ import android.view.View;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.view.WindowManagerPolicy;
+import android.view.WindowManagerPolicy.ThumbModeFuncs;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -103,6 +107,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
     final boolean mLayoutAttached;
     final boolean mIsImWindow;
     final boolean mIsWallpaper;
+    final boolean mIsFakeWallpaper;
     final boolean mIsFloatingLayer;
     int mSeq;
     boolean mEnforceSizeCompat;
@@ -234,6 +239,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
 
     // "Real" frame that the application sees, in display coordinate space.
     final Rect mFrame = new Rect();
+    final Rect mFrameOri = new Rect();
     final Rect mLastFrame = new Rect();
     // Frame that is scaled to the application's coordinate space when in
     // screen size compatibility mode.
@@ -361,6 +367,16 @@ final class WindowState implements WindowManagerPolicy.WindowState {
     /** When true this window can be displayed on screens owther than mOwnerUid's */
     private boolean mShowToOwnerOnly;
 
+    private boolean mWinInThumbMode = false;
+    int mLeftBase = 0;
+    int mRightBase = 0;
+    int mTopBase = 0;
+    int mBotBase = 0;
+    int mHeightBase = 0;
+    int mAttrsYPosBase = 0;
+    int mWidthBase = 0;
+    int mStateThumbMode = ThumbModeHelper.THUMB_WINDOW_STATE_NORMAL;
+
     /**
      * Wake lock for drawing.
      * Even though it's slightly more expensive to do so, we will use a separate wake lock
@@ -370,6 +386,10 @@ final class WindowState implements WindowManagerPolicy.WindowState {
      */
     PowerManager.WakeLock mDrawLock;
 
+    int mHintWidth;
+
+    boolean mIsSidebarSideView;
+
     WindowState(WindowManagerService service, Session s, IWindow c, WindowToken token,
            WindowState attachedWindow, int appOp, int seq, WindowManager.LayoutParams a,
            int viewVisibility, final DisplayContent displayContent) {
@@ -412,6 +432,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             mLayoutAttached = false;
             mIsImWindow = false;
             mIsWallpaper = false;
+            mIsFakeWallpaper = false;
             mIsFloatingLayer = false;
             mBaseLayer = 0;
             mSubLayer = 0;
@@ -461,6 +482,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
                     || attachedWindow.mAttrs.type == TYPE_INPUT_METHOD_DIALOG;
             mIsWallpaper = attachedWindow.mAttrs.type == TYPE_WALLPAPER;
             mIsFloatingLayer = mIsImWindow || mIsWallpaper;
+            mIsFakeWallpaper = mIsWallpaper && ThumbModeHelper.THUMB_WALLPAPER_WINDOW_TITLE.equals(mAttrs.getTitle());
         } else {
             // The multiplier here is to reserve space for multiple
             // windows in the same type layer.
@@ -474,6 +496,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
                     || mAttrs.type == TYPE_INPUT_METHOD_DIALOG;
             mIsWallpaper = mAttrs.type == TYPE_WALLPAPER;
             mIsFloatingLayer = mIsImWindow || mIsWallpaper;
+            mIsFakeWallpaper = false;
         }
 
         WindowState appWin = this;
@@ -514,6 +537,11 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         mInputWindowHandle = new InputWindowHandle(
                 mAppToken != null ? mAppToken.mInputApplicationHandle : null, this,
                 displayContent.getDisplayId());
+        if(mAttrs.getTitle() != null && mAttrs.getTitle().toString().equals("sidebar_sideview")) {
+            mIsSidebarSideView = true;
+            mHintWidth = mContext.getResources().getDimensionPixelSize(
+                    com.android.internal.R.dimen.sidebar_width);
+        }
     }
 
     void attach() {
@@ -653,7 +681,25 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             mOutsets.set(0, 0, 0, 0);
         }
 
-        // Make sure the content and visible frames are inside of the
+        mLeftBase = mFrame.left;
+        mTopBase = mFrame.top;
+        mRightBase = mFrame.right;
+        mBotBase = mFrame.bottom;
+        mHeightBase = mFrame.height();
+        mWidthBase = mFrame.width();
+
+
+        if(mAttrsYPosBase != mAttrs.y){
+            mLeftBase = mFrame.left;
+            mTopBase = mFrame.top;
+            mRightBase = mFrame.right;
+            mBotBase = mFrame.bottom;
+            mAttrsYPosBase = mAttrs.y;
+        }
+
+        mWinInThumbMode = false;
+
+            // Make sure the content and visible frames are inside of the
         // final window frame.
         mContentFrame.set(Math.max(mContentFrame.left, mFrame.left),
                 Math.max(mContentFrame.top, mFrame.top),
@@ -1051,7 +1097,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         }
         return mHasSurface && !mDestroying
                 && ((!mAttachedHidden && mViewVisibility == View.VISIBLE
-                                && !mRootToken.hidden)
+                                && (mIsFakeWallpaper ? true : !mRootToken.hidden))
                         || mWinAnimator.mAnimation != null
                         || ((atoken != null) && (atoken.mAppAnimator.animation != null)
                                 && !mWinAnimator.isDummyAnimation()));
@@ -1130,15 +1176,27 @@ final class WindowState implements WindowManagerPolicy.WindowState {
      * sense to call from performLayoutAndPlaceSurfacesLockedInner().)
      */
     boolean hasMoved() {
-        return mHasSurface && mContentChanged && !mExiting && !mWinAnimator.mLastHidden
-                && mService.okToDisplay() && (mFrame.top != mLastFrame.top
-                        || mFrame.left != mLastFrame.left)
+        if(canMovedByThumb()){
+            if(ThumbModeHelper.getInstance().needAnimatedMove()
+                    && !mExiting && !mWinAnimator.mLastHidden && mService.okToDisplay()
+                    && (mAttachedWindow == null || !mAttachedWindow.hasMoved())){
+                return true;
+            }
+        }
+        return mHasSurface && mContentChanged && !mExiting && !mWinAnimator.mLastHidden && mService.okToDisplay()
+                && (mFrame.top != mLastFrame.top
+                    || mFrame.left != mLastFrame.left)
                 && (mAttachedWindow == null || !mAttachedWindow.hasMoved());
     }
 
     boolean isFullscreen(int screenWidth, int screenHeight) {
-        return mFrame.left <= 0 && mFrame.top <= 0 &&
-                mFrame.right >= screenWidth && mFrame.bottom >= screenHeight;
+        if((mStateThumbMode != ThumbModeHelper.THUMB_WINDOW_STATE_NORMAL)){
+            return mLeftBase <= 0 && mTopBase <= 0 &&
+                    mRightBase >= screenWidth && mBotBase >= screenHeight;
+        }else{
+            return mFrame.left <= 0 && mFrame.top <= 0 &&
+                    mFrame.right >= screenWidth && mFrame.bottom >= screenHeight;
+        }
     }
 
     boolean isConfigChanged() {
@@ -1438,6 +1496,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
 
     public void getTouchableRegion(Region outRegion) {
         final Rect frame = mFrame;
+        boolean regionScaled = false;
         switch (mTouchableInsets) {
             default:
             case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_FRAME:
@@ -1452,10 +1511,24 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION: {
                 final Region givenTouchableRegion = mGivenTouchableRegion;
                 outRegion.set(givenTouchableRegion);
+                if(mWinInThumbMode && mGlobalScale != 1.0f){
+                    outRegion.scale(mGlobalScale);
+                    regionScaled = true;
+                }
                 outRegion.translate(frame.left, frame.top);
                 break;
             }
         }
+        if(mIsSidebarSideView) {
+            if ((mAttrs.flags & (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR))
+                    == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
+                if (mAttrs.gravity == (Gravity.LEFT | Gravity.FILL_VERTICAL)) {
+                    outRegion.set(mFrame.left, mFrame.top, mFrame.left + mHintWidth, mFrame.bottom);
+                } else if(mAttrs.gravity == (Gravity.RIGHT | Gravity.FILL_VERTICAL)) {
+                    outRegion.set(mFrame.right - mHintWidth, 0, mFrame.right, mFrame.bottom);
+                }
+            }
+        }
     }
 
     WindowList getWindowList() {
@@ -1505,8 +1578,10 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             setConfiguration(mService.mCurConfiguration, overrideConfig);
             if (DEBUG_ORIENTATION && mWinAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING)
                 Slog.i(TAG, "Resizing " + this + " WITH DRAW PENDING");
-
-            final Rect frame = mFrame;
+            if (DEBUG_RESIZE) {
+                Slog.i(TAG, "Resizing drawing state: " + mWinAnimator.mDrawState);
+            }
+            final Rect frame = mIsImWindow ? mFrameOri : mFrame;
             final Rect overscanInsets = mLastOverscanInsets;
             final Rect contentInsets = mLastContentInsets;
             final Rect visibleInsets = mLastVisibleInsets;
@@ -1785,4 +1860,109 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         }
         return mStringNameCache;
     }
+
+    private int mThumbState = 0;
+
+    private float mOneHandedScale = 1.0f;
+    public boolean adjustThumbLayout(){
+        boolean canMovedByThumb = canMovedByThumb();
+        if(canMovedByThumb && mThumbState != ThumbModeHelper.getInstance().getThumbStates()){
+            mThumbState = ThumbModeHelper.getInstance().getThumbStates();
+            ThumbModeHelper.getInstance().dispatchThumbStatesOnlyWin(this);
+        }
+
+        if(!mWinInThumbMode){
+            mFrameOri.set(mFrame.left, mFrame.top, mFrame.right, mFrame.bottom);
+        }
+
+        if(canMovedByThumb){
+            if(ThumbModeHelper.getInstance().needAdjustFrameToThumb() && !mWinInThumbMode){
+                if(ThumbModeHelper.getInstance().getPendingThumbAction() == ThumbModeFuncs.ACTION_FROM_TOP_LEFT_PULL_DOWN_SIDEBAR){
+                    int frameWidth = mFrame.width();
+                    int frameHeight = mFrame.height();
+                    mFrame.top = (int)(mTopBase * mService.mScaleThumbScaleS + mService.mScaleThumbYOffsetS);
+                    mFrame.left = (int)(mLeftBase * mService.mScaleThumbScaleS);
+                    mFrame.right = mFrame.left + frameWidth;
+                    mFrame.bottom = mFrame.top + frameHeight;
+                    mGlobalScale = mService.mScaleThumbScaleS;
+                    mStateThumbMode = ThumbModeHelper.THUMB_WINDOW_STATE_LEFTBOTTOM_SIDEBAR;
+                }else if (ThumbModeHelper.getInstance().getPendingThumbAction() == ThumbModeFuncs.ACTION_FROM_TOP_RIGHT_PULL_DOWN_SIDEBAR){
+                    int frameWidth = mFrame.width();
+                    int frameHeight = mFrame.height();
+                    mFrame.top = (int)(mTopBase * mService.mScaleThumbScaleS + mService.mScaleThumbYOffsetS);
+                    mFrame.left = (int)(mLeftBase * mService.mScaleThumbScaleS + mService.mScaleThumbXOffsetS);
+                    mFrame.right = mFrame.left + frameWidth;
+                    mFrame.bottom = mFrame.top + frameHeight;
+                    mGlobalScale = mService.mScaleThumbScaleS;
+                    mStateThumbMode = ThumbModeHelper.THUMB_WINDOW_STATE_RIGHTBOTTOM_SIDEBAR;
+                } else{
+                    return false;
+                }
+
+                mWinInThumbMode = true;
+                if(mIsImWindow == false){
+                    mCompatFrame.set(mFrame);
+                }
+                return true;
+            }else if(ThumbModeHelper.getInstance().needAdjustFrameToNoraml() && mWinInThumbMode){
+                int frameHeight = mFrame.height();
+                mFrame.top = mTopBase;
+                if(mHeightBase != frameHeight){
+                    mFrame.bottom = mFrame.top + frameHeight;
+                }else{
+                    mFrame.bottom = mBotBase;
+                }
+                int frameWidth = mFrame.width();
+                mFrame.left = mLeftBase;
+                if(mWidthBase != frameWidth){
+                    mFrame.right = mFrame.left + frameWidth;
+                }else{
+                    mFrame.right = mRightBase;
+                }
+                mWinInThumbMode = false;
+                mGlobalScale = 1f;
+                if(mIsImWindow == false){
+                    mCompatFrame.set(mFrame);
+                }
+                return true;
+            }
+            return false;
+        }
+        return false;
+    }
+
+    public boolean canMovedByThumb(){
+        if(this.getAttrs().type != WindowManager.LayoutParams.TYPE_WALLPAPER
+                && this.getAttrs().type != WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS
+                && (this.mAttachedWindow == null || this.mAttachedWindow.getAttrs().type != WindowManager.LayoutParams.TYPE_SIDEBAR_TOOLS)
+                && this.getAttrs().type != WindowManager.LayoutParams.TYPE_KEYGUARD
+                && this.getAttrs().type != WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG
+                && this.getAttrs().type != WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM
+                && this.getAttrs().type != WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY
+                && !ThumbModeHelper.SCREEN_SHOT_WINDOW_TITLE.equals(this.getAttrs().getTitle())
+                && !ThumbModeHelper.SHOT_SCREEN_SHOT_WINDOW_TITLE.equals(this.getAttrs().getTitle())
+                && !ThumbModeHelper.THUMB_WALLPAPER_WINDOW_TITLE.equals(this.getAttrs().getTitle())
+                && (mAttachedWindow == null || mAttachedWindow.canMovedByThumb())){
+            return true;
+        }
+        return false;
+    }
+
+    public boolean isWinInThumbMode(){
+        return mWinInThumbMode;
+    }
+
+    /**
+     * @hide
+     * */
+    public int getHintWidth() {
+        return mHintWidth;
+    }
+
+    /**
+     * @hide
+     * */
+    public boolean isSidebarSideView() {
+        return mIsSidebarSideView;
+    }
 }
diff --git a/services/core/java/com/android/server/wm/WindowStateAnimator.java b/services/core/java/com/android/server/wm/WindowStateAnimator.java
index 342a2ac..e200560 100644
--- a/services/core/java/com/android/server/wm/WindowStateAnimator.java
+++ b/services/core/java/com/android/server/wm/WindowStateAnimator.java
@@ -499,6 +499,10 @@ class WindowStateAnimator {
     }
 
     void hide() {
+        if(mWin.mIsFakeWallpaper && ThumbModeHelper.getInstance().isSysInThumbMode()){
+            return;
+        }
+
         if (!mLastHidden) {
             //dump();
             mLastHidden = true;
@@ -1085,7 +1089,7 @@ class WindowStateAnimator {
         // Wallpapers are animated based on the "real" window they
         // are currently targeting.
         final WindowState wallpaperTarget = mService.mWallpaperTarget;
-        if (mIsWallpaper && wallpaperTarget != null && mService.mAnimateWallpaperWithTarget) {
+        if (!mWin.mIsFakeWallpaper && mIsWallpaper && wallpaperTarget != null && mService.mAnimateWallpaperWithTarget) {
             final WindowStateAnimator wallpaperAnimator = wallpaperTarget.mWinAnimator;
             if (wallpaperAnimator.mHasLocalTransformation &&
                     wallpaperAnimator.mAnimation != null &&
@@ -1140,16 +1144,24 @@ class WindowStateAnimator {
             } else {
                 tmpMatrix.reset();
             }
+            boolean isAttatchedFullScreenWinInThumbMode =
+                    ThumbModeHelper.getInstance().isSysInThumbMode() && attachedTransformation != null
+                    && mWin.isFullscreen(ThumbModeHelper.WIDTH_SCREEN, ThumbModeHelper.HEIGHT_SCREEN);
+            if (appTransformation != null) {
+                tmpMatrix.postConcat(appTransformation.getMatrix());
+            }
             tmpMatrix.postScale(mWin.mGlobalScale, mWin.mGlobalScale);
             if (selfTransformation) {
                 tmpMatrix.postConcat(mTransformation.getMatrix());
             }
-            tmpMatrix.postTranslate(frame.left + mWin.mXOffset, frame.top + mWin.mYOffset);
+            if(!isAttatchedFullScreenWinInThumbMode){
+                tmpMatrix.postTranslate(frame.left + mWin.mXOffset, frame.top + mWin.mYOffset);
+            }
             if (attachedTransformation != null) {
                 tmpMatrix.postConcat(attachedTransformation.getMatrix());
             }
-            if (appTransformation != null) {
-                tmpMatrix.postConcat(appTransformation.getMatrix());
+            if(isAttatchedFullScreenWinInThumbMode){
+                tmpMatrix.postTranslate(frame.left + mWin.mXOffset, frame.top + mWin.mYOffset);
             }
             if (screenAnimation) {
                 tmpMatrix.postConcat(screenRotationAnimation.getEnterTransformation().getMatrix());
@@ -1181,6 +1193,10 @@ class WindowStateAnimator {
             float y = tmpFloats[Matrix.MTRANS_Y];
             int w = frame.width();
             int h = frame.height();
+            // vertical move of wallpaper is not permitted.
+            if (mIsWallpaper){
+                y = 0;
+            }
             mWin.mShownFrame.set(x, y, x+w, y+h);
 
             // Now set the alpha...  but because our current hardware
@@ -1292,8 +1308,15 @@ class WindowStateAnimator {
         final int height = w.mFrame.height();
 
         // Compute the offset of the window in relation to the decor rect.
-        final int left = w.mXOffset + w.mFrame.left;
-        final int top = w.mYOffset + w.mFrame.top;
+        int top;
+        int left;
+        if (w.isWinInThumbMode()) {
+            left = w.mXOffset + w.mLeftBase;
+            top = w.mYOffset + w.mTopBase;
+        } else {
+            left = w.mXOffset + w.mFrame.left;
+            top = w.mYOffset + w.mFrame.top;
+        }
 
         // Initialize the decor rect to the entire frame.
         w.mSystemDecorRect.set(0, 0, width, height);
@@ -1317,7 +1340,12 @@ class WindowStateAnimator {
         }
     }
 
-    void updateSurfaceWindowCrop(final boolean recoveringMemory) {
+    void updateSurfaceWindowCrop(final boolean recoveringMemory){
+        updateSurfaceWindowCrop(recoveringMemory, false, 0, 0, 0, 0);
+    }
+
+    void updateSurfaceWindowCrop(final boolean recoveringMemory, boolean needThumbAdjust,
+                                 int left, int top, int width, int height) {
         final WindowState w = mWin;
         final DisplayContent displayContent = w.getDisplayContent();
         if (displayContent == null) {
@@ -1338,8 +1366,13 @@ class WindowStateAnimator {
                     displayInfo.logicalWidth - w.mCompatFrame.left,
                     displayInfo.logicalHeight - w.mCompatFrame.top);
         } else if (w.mLayer >= mService.mSystemDecorLayer) {
-            // Above the decor layer is easy, just use the entire window.
-            w.mSystemDecorRect.set(0, 0, w.mCompatFrame.width(), w.mCompatFrame.height());
+            if (w.isSidebarSideView()) {
+                applyDecorRect(w.mDecorFrame);
+            } else {
+                // Above the decor layer is easy, just use the entire window.
+                w.mSystemDecorRect.set(0, 0, w.mCompatFrame.width(), w.mCompatFrame.height());
+            }
+
         } else if (w.mDecorFrame.isEmpty()) {
             // Windows without policy decor aren't cropped.
             w.mSystemDecorRect.set(0, 0, w.mCompatFrame.width(), w.mCompatFrame.height());
@@ -1378,6 +1411,14 @@ class WindowStateAnimator {
         // so we need to translate to match the actual surface coordinates.
         clipRect.offset(attrs.surfaceInsets.left, attrs.surfaceInsets.top);
 
+        boolean camPreview = mWin.mAttachedWindow != null &&
+                "com.android.camera2/com.android.camera.CameraLauncher"
+                        .equals(mWin.mAttachedWindow.getAttrs().getTitle());
+
+        if(needThumbAdjust && mWin.canMovedByThumb() && mWin.isWinInThumbMode()){
+            ThumbModeHelper.getInstance().clampSurfaceRect(clipRect,
+                    left, top, width, height, camPreview, mDsDx * w.mHScale, mDtDy * w.mVScale);
+        }
         if (!clipRect.equals(mLastClipRect)) {
             mLastClipRect.set(clipRect);
             try {
@@ -1502,7 +1543,7 @@ class WindowStateAnimator {
             }
         }
 
-        updateSurfaceWindowCrop(recoveringMemory);
+        updateSurfaceWindowCrop(recoveringMemory, true, (int)left, (int)top, width, height);
     }
 
     public void prepareSurfaceLocked(final boolean recoveringMemory) {
@@ -1523,33 +1564,7 @@ class WindowStateAnimator {
 
         setSurfaceBoundariesLocked(recoveringMemory);
 
-        if (mIsWallpaper && !mWin.mWallpaperVisible) {
-            // Wallpaper is no longer visible and there is no wp target => hide it.
-            hide();
-        } else if (w.mAttachedHidden || !w.isOnScreen()) {
-            hide();
-            mService.hideWallpapersLocked(w);
-
-            // If we are waiting for this window to handle an
-            // orientation change, well, it is hidden, so
-            // doesn't really matter.  Note that this does
-            // introduce a potential glitch if the window
-            // becomes unhidden before it has drawn for the
-            // new orientation.
-            if (w.mOrientationChanging) {
-                w.mOrientationChanging = false;
-                if (DEBUG_ORIENTATION) Slog.v(TAG,
-                        "Orientation change skips hidden " + w);
-            }
-        } else if (mLastLayer != mAnimLayer
-                || mLastAlpha != mShownAlpha
-                || mLastDsDx != mDsDx
-                || mLastDtDx != mDtDx
-                || mLastDsDy != mDsDy
-                || mLastDtDy != mDtDy
-                || w.mLastHScale != w.mHScale
-                || w.mLastVScale != w.mVScale
-                || mLastHidden) {
+        if(mWin.mIsFakeWallpaper && ThumbModeHelper.getInstance().isSysInThumbMode()){
             displayed = true;
             mLastAlpha = mShownAlpha;
             mLastLayer = mAnimLayer;
@@ -1613,10 +1628,89 @@ class WindowStateAnimator {
                 }
             }
         } else {
+            if (mIsWallpaper && !mWin.mWallpaperVisible) {
+                // Wallpaper is no longer visible and there is no wp target => hide it.
+                hide();
+            } else if (w.mAttachedHidden || !w.isReadyForDisplay()) {
+                hide();
+                mService.hideWallpapersLocked(w);
+
+                // If we are waiting for this window to handle an
+                // orientation change, well, it is hidden, so
+                // doesn't really matter.  Note that this does
+                // introduce a potential glitch if the window
+                // becomes unhidden before it has drawn for the
+                // new orientation.
+                if (w.mOrientationChanging) {
+                    w.mOrientationChanging = false;
+                    if (DEBUG_ORIENTATION) Slog.v(TAG,
+                            "Orientation change skips hidden " + w);
+                }
+            } else if (mLastLayer != mAnimLayer
+                    || mLastAlpha != mShownAlpha
+                    || mLastDsDx != mDsDx
+                    || mLastDtDx != mDtDx
+                    || mLastDsDy != mDsDy
+                    || mLastDtDy != mDtDy
+                    || w.mLastHScale != w.mHScale
+                    || w.mLastVScale != w.mVScale
+                    || mLastHidden) {
+                displayed = true;
+                mLastAlpha = mShownAlpha;
+                mLastLayer = mAnimLayer;
+                mLastDsDx = mDsDx;
+                mLastDtDx = mDtDx;
+                mLastDsDy = mDsDy;
+                mLastDtDy = mDtDy;
+                w.mLastHScale = w.mHScale;
+                w.mLastVScale = w.mVScale;
+                if (WindowManagerService.SHOW_TRANSACTIONS) WindowManagerService.logSurface(w,
+                        "alpha=" + mShownAlpha + " layer=" + mAnimLayer
+                        + " matrix=[" + (mDsDx*w.mHScale)
+                        + "," + (mDtDx*w.mVScale)
+                        + "][" + (mDsDy*w.mHScale)
+                        + "," + (mDtDy*w.mVScale) + "]", null);
+                if (mSurfaceControl != null) {
+                    try {
+                        mSurfaceAlpha = mShownAlpha;
+                        mSurfaceControl.setAlpha(mShownAlpha);
+                        mSurfaceLayer = mAnimLayer;
+                        //it's bad to maintan, but mAnimLayer is changed many place and 
+                        //hard to ensure will not be change other place in future
+                        mSurfaceControl.setLayer(mAnimLayer);
+                        mSurfaceControl.setMatrix(
+                            mDsDx*w.mHScale, mDtDx*w.mVScale,
+                            mDsDy*w.mHScale, mDtDy*w.mVScale);
+                        if (mLastHidden && mDrawState == HAS_DRAWN) {
+                            if (WindowManagerService.SHOW_TRANSACTIONS) WindowManagerService.logSurface(w,
+                                    "SHOW (performLayout)", null);
+                            if (WindowManagerService.DEBUG_VISIBILITY) Slog.v(TAG, "Showing " + w
+                                    + " during relayout");
+                            if (showSurfaceRobustlyLocked()) {
+                                mLastHidden = false;
+                                if (mIsWallpaper) {
+                                    mService.dispatchWallpaperVisibility(w, true);
+                                }
+                            } else {
+                                w.mOrientationChanging = false;
+                            }
+                        }
+                        if (mSurfaceControl != null) {
+                            w.mToken.hasVisible = true;
+                        }
+                    } catch (RuntimeException e) {
+                        Slog.w(TAG, "Error updating surface in " + w, e);
+                        if (!recoveringMemory) {
+                            mService.reclaimSomeSurfaceMemoryLocked(this, "update", true);
+                        }
+                    }
+                }
+            } else {
             if (DEBUG_ANIM && isAnimating()) {
                 Slog.v(TAG, "prepareSurface: No changes in animation for " + this);
             }
             displayed = true;
+            }
         }
 
         if (displayed) {
diff --git a/services/core/jni/com_android_server_input_InputWindowHandle.cpp b/services/core/jni/com_android_server_input_InputWindowHandle.cpp
index 01c51cf..fae4295 100644
--- a/services/core/jni/com_android_server_input_InputWindowHandle.cpp
+++ b/services/core/jni/com_android_server_input_InputWindowHandle.cpp
@@ -54,6 +54,7 @@ static struct {
     jfieldID ownerUid;
     jfieldID inputFeatures;
     jfieldID displayId;
+    jfieldID inThumbMode;
 } gInputWindowHandleClassInfo;
 
 static Mutex gHandleMutex;
@@ -158,6 +159,8 @@ bool NativeInputWindowHandle::updateInfo() {
             gInputWindowHandleClassInfo.inputFeatures);
     mInfo->displayId = env->GetIntField(obj,
             gInputWindowHandleClassInfo.displayId);
+    mInfo->inThumbMode = env->GetBooleanField(obj,
+            gInputWindowHandleClassInfo.inThumbMode);
 
     env->DeleteLocalRef(obj);
     return true;
@@ -302,6 +305,9 @@ int register_android_server_InputWindowHandle(JNIEnv* env) {
 
     GET_FIELD_ID(gInputWindowHandleClassInfo.displayId, clazz,
             "displayId", "I");
+
+    GET_FIELD_ID(gInputWindowHandleClassInfo.inThumbMode, clazz,
+            "inThumbMode", "Z");
     return 0;
 }
 
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index d19f8ac..6046497 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -84,6 +84,7 @@ import com.android.server.power.PowerManagerService;
 import com.android.server.power.ShutdownThread;
 import com.android.server.restrictions.RestrictionsManagerService;
 import com.android.server.search.SearchManagerService;
+import com.android.server.onestep.OneStepManagerService;
 import com.android.server.statusbar.StatusBarManagerService;
 import com.android.server.storage.DeviceStorageMonitorService;
 import com.android.server.telecom.TelecomLoaderService;
@@ -567,6 +568,7 @@ public final class SystemServer {
         AssetAtlasService atlas = null;
         MediaRouterService mediaRouter = null;
         GestureService gestureService = null;
+        OneStepManagerService oneStep = null;
 
         // Bring up services needed for UI.
         if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
@@ -657,6 +659,13 @@ public final class SystemServer {
                 }
             }
 
+            try {
+                oneStep = new OneStepManagerService(context, wm);
+                ServiceManager.addService(Context.ONE_STEP_SERVICE, oneStep);
+            } catch (Throwable e) {
+                reportWtf("starting OneStepManagerService", e);
+            }
+
             if (!disableNonCoreServices) {
                 try {
                     Slog.i(TAG, "Clipboard Service");
@@ -1195,6 +1204,11 @@ public final class SystemServer {
                     reportWtf("starting System UI", e);
                 }
                 try {
+                    startOneStepUi(context);
+                } catch (Throwable e) {
+                    reportWtf("starting  Sidebar UI", e);
+                }
+                try {
                     if (networkScoreF != null) networkScoreF.systemReady();
                 } catch (Throwable e) {
                     reportWtf("making Network Score Service ready", e);
@@ -1307,4 +1321,11 @@ public final class SystemServer {
         //Slog.d(TAG, "Starting service: " + intent);
         context.startServiceAsUser(intent, UserHandle.OWNER);
     }
+
+    static final void startOneStepUi(Context context) {
+        Intent intent = new Intent();
+        intent.setComponent(new ComponentName("com.smartisanos.sidebar",
+                "com.smartisanos.sidebar.SidebarService"));
+        context.startServiceAsUser(intent, UserHandle.OWNER);
+    }
 }
-- 
2.6.6

